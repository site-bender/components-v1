{
	"sourceFile": "src/metadata/TimeZone/index.astro",
	"activeCommit": 0,
	"commits": [
		{
			"activePatchIndex": 0,
			"patches": [
				{
					"date": 1689031655216,
					"content": "Index: \n===================================================================\n--- \n+++ \n"
				}
			],
			"date": 1689031655216,
			"name": "Commit-0",
			"content": "---\nimport { Temporal } from \"@js-temporal/polyfill\";\nimport type { Thing } from \"../../schema.org\";\nimport mapDataset from \"../../utilities/mapDataset\";\nimport type { Dataset } from \"../../types\";\nimport type { HTMLAttributes } from \"astro/types\";\nimport Microdata from \"../../Microdata/index.astro\";\n\nexport type Props<T extends Thing> = HTMLAttributes<\"span\"> & {\n\tcssClasses?: Array<string>;\n\tdataset?: Dataset;\n\tdisplay?: \"name\" | \"offset\" | \"both\";\n\titemprop?: string | undefined;\n\tlocalTime?: string | Temporal.Instant | Temporal.ZonedDateTime;\n\tproperties?: Partial<T>;\n\ttimeZone: string | Temporal.TimeZone | Temporal.ZonedDateTime;\n\titemtype?: string;\n};\n\nconst {\n\t[\"class:list\"]: classList = [],\n\tdataset,\n\tdisplay = \"name\",\n\titemprop,\n\tlocalTime = Temporal.Now.instant(),\n\tproperties,\n\ttimeZone,\n\ttype,\n\t...attrs\n} = Astro.props;\n\nconst css = [\"sb-time-zone\", ...cssClasses].join(\" \");\nconst data = mapDataset(dataset);\nconst timeZoneName =\n\ttimeZone instanceof Temporal.TimeZone\n\t\t? timeZone.toString()\n\t\t: timeZone instanceof Temporal.ZonedDateTime\n\t\t? (timeZone as Temporal.ZonedDateTime).timeZoneId\n\t\t: timeZone;\n\nconst label =\n\tdisplay === \"offset\"\n\t\t? timeZoneName.getOffsetStringFor(localTime)\n\t\t: display === \"both\"\n\t\t? `${timeZoneName} ${timeZoneName.getOffsetStringFor(localTime)}`\n\t\t: timeZoneName;\n\nconst useMicrodata = Boolean(import.meta.env.USE_MICRODATA);\nconst meta = {\n\ttype,\n\t...(itemprop ? { [itemprop]: label } : {}),\n\t...properties,\n};\n---\n\n{useMicrodata && type ? <Microdata as=\"span\" properties={meta} /> : null}\n<span class={css} {...data} {...attrs}>{label}</span>\n"
		}
	]
}
