{
    "sourceFile": "src/metadata/Duration/index.astro",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1689031744850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1689031907086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n } from \"../../schema.org\";\n import type { HTMLAttributes } from \"astro/types\";\n \n export type Props = HTMLAttributes<\"time\"> & {\n-  cssClasses?: Array<string>;\n   dataset?: Dataset;\n   duration: string | Temporal.Duration;\n   itemprop?: string;\n   properties?: Partial<\n"
                },
                {
                    "date": 1689031964747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n ---\n import { Temporal } from \"@js-temporal/polyfill\";\n+import createClassList from \"../../utilities/createClassList\";\n import formatDuration from \"../../utilities/formatDuration\";\n import mapDataset from \"../../utilities/mapDataset\";\n import Microdata from \"../../Microdata/index.astro\";\n import type { Dataset } from \"../../types\";\n"
                },
                {
                    "date": 1689032311775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,8 @@\n \tproperties = {},\n \t...attrs\n } = Astro.props;\n \n-const css = [\"sb-duration\", ...cssClasses].join(\" \");\n const d = Temporal.Duration.from(duration);\n const data = mapDataset(dataset);\n \n const useMicrodata = Boolean(import.meta.env.USE_MICRODATA);\n@@ -58,9 +57,9 @@\n {\n \tuseMicrodata && properties.type ? (\n \t\t<Microdata\n \t\t\tas=\"time\"\n-\t\t\tclass={css}\n+\t\t\tclass:list={createClassList(\"sb-duration\", classList)}\n \t\t\t{...data}\n \t\t\tproperties={meta}\n \t\t\t{...(attrs as Object)}\n \t\t>\n@@ -71,9 +70,9 @@\n \t\t\t/>\n \t\t\t<span>{formatDuration(d)}</span>\n \t\t</Microdata>\n \t) : (\n-\t\t<time class={css} {...data} {...attrs}>\n+\t\t<time class:list={createClassList(\"sb-duration\", classList)} {...data} {...attrs}>\n \t\t\t{formatDuration(d)}\n \t\t</time>\n \t)\n }\n"
                },
                {
                    "date": 1689038799382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,69 @@\n+---\n+import { Temporal } from \"@js-temporal/polyfill\";\n+import createClassList from \"../../utilities/createClassList\";\n+import formatDuration from \"../../utilities/formatDuration\";\n+import mapDataset from \"../../utilities/mapDataset\";\n+import Microdata from \"../../Microdata/index.astro\";\n+import type { BaseAttributes } from \"../../types/html\";\n+import type { DurationProps as Props } from \"../../types\";\n+\n+const {\n+\t[\"class:list\"]: classList = [],\n+\tdataset,\n+\tduration,\n+\titemprop = \"duration\",\n+\touter = {},\n+\tproperties = {},\n+\t...attrs\n+} = Astro.props;\n+\n+const {\n+\t[\"class:list\"]: outerClassList = [],\n+\tdataset: outerDataset,\n+\t...outerAttrs\n+} = outer as BaseAttributes;\n+\n+const d = Temporal.Duration.from(duration);\n+\n+const useMicrodata = Boolean(import.meta.env.USE_MICRODATA);\n+const meta = {\n+\tduration,\n+\t...properties,\n+};\n+---\n+\n+{\n+\tuseMicrodata && properties.type ? (\n+\t\t<Microdata\n+\t\t\tas=\"time\"\n+\t\t\t{...outerAttrs}\n+\t\t\tclass:list={createClassList(\"sb-duration-microdata\", outerClassList)}\n+\t\t\t{...mapDataset(outerDataset)}\n+\t\t\tdata-sb-duration=\"microdata\"\n+\t\t\tproperties={meta}\n+\t\t>\n+\t\t\t<meta\n+\t\t\t\titemprop=\"duration\"\n+\t\t\t\titemtype=\"https://schema.org/Duration\"\n+\t\t\t\tcontent={duration?.toString()}\n+\t\t\t/>\n+\t\t\t<span\n+\t\t\t\t{...attrs}\n+\t\t\t\tclass:list={createClassList(\"sb-duration\", classList)}\n+\t\t\t\t{...mapDataset(dataset)}\n+\t\t\t\tdata-sb-duration=\"span\"\n+\t\t\t>\n+\t\t\t\t{formatDuration(d)}\n+\t\t\t</span>\n+\t\t</Microdata>\n+\t) : (\n+\t\t<time\n+\t\t\t{...attrs}\n+\t\t\tclass:list={createClassList(\"sb-duration\", classList)}\n+\t\t\t{...mapDataset(dataset)}\n+\t\t\tdata-sb-duration=\"time\"\n+\t\t>\n+\t\t\t{formatDuration(d)}\n+\t\t</time>\n+\t)\n+}\n"
                }
            ],
            "date": 1689031744850,
            "name": "Commit-0",
            "content": "---\nimport { Temporal } from \"@js-temporal/polyfill\";\nimport formatDuration from \"../../utilities/formatDuration\";\nimport mapDataset from \"../../utilities/mapDataset\";\nimport Microdata from \"../../Microdata/index.astro\";\nimport type { Dataset } from \"../../types\";\nimport type {\n  Audiobook,\n  Episode,\n  Event,\n  MediaObject,\n  Movie,\n  MusicRecording,\n  MusicRelease,\n  QuantitativeValueDistribution,\n  Schedule,\n} from \"../../schema.org\";\nimport type { HTMLAttributes } from \"astro/types\";\n\nexport type Props = HTMLAttributes<\"time\"> & {\n  cssClasses?: Array<string>;\n  dataset?: Dataset;\n  duration: string | Temporal.Duration;\n  itemprop?: string;\n  properties?: Partial<\n    | Audiobook\n    | Episode\n    | Event\n    | MediaObject\n    | Movie\n    | MusicRecording\n    | MusicRelease\n    | QuantitativeValueDistribution\n    | Schedule\n  >;\n};\n\nconst {\n\t[\"class:list\"]: classList = [],\n  dataset,\n  duration,\n  itemprop = \"duration\",\n  properties = {},\n  ...attrs\n} = Astro.props;\n\nconst css = [\"sb-duration\", ...cssClasses].join(\" \");\nconst d = Temporal.Duration.from(duration);\nconst data = mapDataset(dataset);\n\nconst useMicrodata = Boolean(import.meta.env.USE_MICRODATA);\nconst meta = {\n  duration,\n  ...properties,\n};\n---\n\n{\n  useMicrodata && properties.type ? (\n    <Microdata\n      as=\"time\"\n      class={css}\n      {...data}\n      properties={meta}\n      {...(attrs as Object)}\n    >\n      <meta\n        itemprop=\"duration\"\n        itemtype=\"https://schema.org/Duration\"\n        content={duration?.toString()}\n      />\n      <span>{formatDuration(d)}</span>\n    </Microdata>\n  ) : (\n    <time class={css} {...data} {...attrs}>\n      {formatDuration(d)}\n    </time>\n  )\n}\n"
        }
    ]
}