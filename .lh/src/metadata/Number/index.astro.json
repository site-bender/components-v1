{
    "sourceFile": "src/metadata/Number/index.astro",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 67,
            "patches": [
                {
                    "date": 1689031744850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1689045737469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,21 +7,21 @@\n export type Props = HTMLAttributes<\"span\"> & {\n   a?: Partial<HTMLAttributes<\"a\">>;\n   cssClasses?: Array<string>;\n   dataset?: Dataset;\n-  locale?: string;\n+  locales?: string;\n   options?: NumberFormatOptions;\n   type?: \"Number\" | \"Integer\" | \"Float\";\n   useTabularNumerals?: boolean | undefined;\n   value?: string | number | undefined;\n };\n \n const {\n   a,\n-\t[\"class:list\"]: classList = [],\n+  [\"class:list\"]: classList = [],\n   dataset,\n   itemprop,\n-  locale = \"en-US\",\n+  locales = [\"en-US\"],\n   options = {},\n   type = \"Number\",\n   useTabularNumerals,\n   value,\n@@ -44,9 +44,9 @@\n const { rel, ...linkAttrs } = a || {};\n \n const num = Number.isNaN(val)\n   ? await Astro.slots.render(\"default\")\n-  : new Intl.NumberFormat(locale, options).format(val as number);\n+  : new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n   ? { itemprop, itemtype: `https://schema.org/${type}` }\n   : {};\n ---\n"
                },
                {
                    "date": 1689046097341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,15 @@\n ---\n-import type { Dataset } from \"../../types\";\n+import type { NumberProps as Props } from \"../../types\";\n import type { NumberFormatOptions } from \"./types\";\n import mapDataset from \"../../utilities/mapDataset\";\n import type { HTMLAttributes } from \"astro/types\";\n \n-export type Props = HTMLAttributes<\"span\"> & {\n-  a?: Partial<HTMLAttributes<\"a\">>;\n-  cssClasses?: Array<string>;\n-  dataset?: Dataset;\n-  locales?: string;\n-  options?: NumberFormatOptions;\n-  type?: \"Number\" | \"Integer\" | \"Float\";\n-  useTabularNumerals?: boolean | undefined;\n-  value?: string | number | undefined;\n-};\n-\n const {\n-  a,\n   [\"class:list\"]: classList = [],\n   dataset,\n   itemprop,\n+\tlink = {},\n   locales = [\"en-US\"],\n   options = {},\n   type = \"Number\",\n   useTabularNumerals,\n@@ -29,24 +18,21 @@\n } = Astro.props;\n \n useTabularNumerals && import(\"./index.css\");\n \n-console.log(\"useTabularNumerals\", useTabularNumerals);\n-\n-const css = [\n-  \"sb-number\",\n+const classes = [`sb-${type.toLowerCase()}`,\n   ...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n-  ...cssClasses,\n-].join(\" \");\n+  ...classList,\n+];\n const ext =\n   a?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const data = mapDataset(dataset);\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n const { rel, ...linkAttrs } = a || {};\n \n const num = Number.isNaN(val)\n   ? await Astro.slots.render(\"default\")\n-  : new Intl.NumberFormat(locales, options).format(val as number);\n+  : new Intl.NumberFormat(locale, options).format(val as number);\n const prop = itemprop\n   ? { itemprop, itemtype: `https://schema.org/${type}` }\n   : {};\n ---\n"
                },
                {
                    "date": 1689046234681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,15 +18,22 @@\n } = Astro.props;\n \n useTabularNumerals && import(\"./index.css\");\n \n-const classes = [`sb-${type.toLowerCase()}`,\n+const {\n+\t[\"class:list\"]: linkClassList = [],\n+\tdataset: linkDataset,\n+\thref,\n+\t...linkAttrs\n+} = link as BaseAttributes;\n+\n+const classes = [\n+\t`sb-${type.toLowerCase()}`,\n   ...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n   ...classList,\n ];\n const ext =\n   a?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n-const data = mapDataset(dataset);\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n const { rel, ...linkAttrs } = a || {};\n \n const num = Number.isNaN(val)\n@@ -37,12 +44,15 @@\n   : {};\n ---\n \n {\n-  a ? (\n-    <a href={a.href} {...ext} {...linkAttrs}>\n-      <span class={css} {...data} {...prop} {...attrs} set:html={num} />\n+  link ? (\n+    <a {...linkAttrs}\n+\t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n+\t\t\t{...mapDataset(linkDataset)}\n+\t\t\tdata-sb-book-title=\"link\" {href} {...ext}>\n+      <span {...attrs} class:list={classes} {...mapDataset(dataset)} {...prop} set:html={num} />\n     </a>\n   ) : (\n-    <span class={css} {...data} {...prop} {...attrs} set:html={num} />\n+    <span {...attrs} class:list={classes} {...mapDataset(dataset)} {...prop} set:html={num} />\n   )\n }\n"
                },
                {
                    "date": 1689046254232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,8 @@\n ];\n const ext =\n   a?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n-const { rel, ...linkAttrs } = a || {};\n \n const num = Number.isNaN(val)\n   ? await Astro.slots.render(\"default\")\n   : new Intl.NumberFormat(locale, options).format(val as number);\n"
                },
                {
                    "date": 1689046454066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,18 @@\n import mapDataset from \"../../utilities/mapDataset\";\n import type { HTMLAttributes } from \"astro/types\";\n \n const {\n-  [\"class:list\"]: classList = [],\n-  dataset,\n-  itemprop,\n+\t[\"class:list\"]: classList = [],\n+\tdataset,\n+\titemprop,\n \tlink = {},\n-  locales = [\"en-US\"],\n-  options = {},\n-  type = \"Number\",\n-  useTabularNumerals,\n-  value,\n-  ...attrs\n+\tlocales = [\"en-US\"],\n+\toptions = {},\n+\ttype = \"Number\",\n+\tuseTabularNumerals,\n+\tvalue,\n+\t...attrs\n } = Astro.props;\n \n useTabularNumerals && import(\"./index.css\");\n \n@@ -27,31 +27,51 @@\n } = link as BaseAttributes;\n \n const classes = [\n \t`sb-${type.toLowerCase()}`,\n-  ...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n-  ...classList,\n+\t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n+\t...classList,\n ];\n const ext =\n-  a?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n+\ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n+const getDataAttr = (val = \"\") => { [`data-sb-${type.toLowerCase()}`]: val }\n const num = Number.isNaN(val)\n-  ? await Astro.slots.render(\"default\")\n-  : new Intl.NumberFormat(locale, options).format(val as number);\n+\t? await Astro.slots.render(\"default\")\n+\t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n-  ? { itemprop, itemtype: `https://schema.org/${type}` }\n-  : {};\n+\t? { itemprop, itemtype: `https://schema.org/${type}` }\n+\t: {};\n ---\n \n {\n-  link ? (\n-    <a {...linkAttrs}\n+\tlink ? (\n+\t\t<a\n+\t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\tdata-sb-book-title=\"link\" {href} {...ext}>\n-      <span {...attrs} class:list={classes} {...mapDataset(dataset)} {...prop} set:html={num} />\n-    </a>\n-  ) : (\n-    <span {...attrs} class:list={classes} {...mapDataset(dataset)} {...prop} set:html={num} />\n-  )\n+\t\t\t{...getDataAttr(\"link\")}\n+\t\t\t{href}\n+\t\t\t{...ext}\n+\t\t>\n+\t\t\t<span\n+\t\t\t\t{...attrs}\n+\t\t\t\tclass:list={classes}\n+\t\t\t\t{...mapDataset(dataset)}\n+\t\t\t{...getDataAttr()}\n+\t\t\t\t{...prop}\n+\t\t\t\tset:html={num}\n+\t\t\t/>\n+\t\t</a>\n+\t) : (\n+\t\t<span\n+\t\t\t{...attrs}\n+\t\t\tclass:list={classes}\n+\t\t\t{...mapDataset(dataset)}\n+\t\t\t{...getDataAttr()}\n+\t\t\tdata-sb-n\n+\t\t\t{...prop}\n+\t\t\tset:html={num}\n+\t\t/>\n+\t)\n }\n"
                },
                {
                    "date": 1689046503849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,11 @@\n const ext =\n \ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n-const getDataAttr = (val = \"\") => { [`data-sb-${type.toLowerCase()}`]: val }\n+function getDataAttr (val = \"\") {\n+\treturn { [`data-sb-${type.toLowerCase()}`]: val }\n+}\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n"
                },
                {
                    "date": 1689046524308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \t\t\t<span\n \t\t\t\t{...attrs}\n \t\t\t\tclass:list={classes}\n \t\t\t\t{...mapDataset(dataset)}\n-\t\t\t{...getDataAttr()}\n+\t\t\t\t{...getDataAttr()}\n \t\t\t\t{...prop}\n \t\t\t\tset:html={num}\n \t\t\t/>\n \t\t</a>\n@@ -70,9 +70,8 @@\n \t\t\t{...attrs}\n \t\t\tclass:list={classes}\n \t\t\t{...mapDataset(dataset)}\n \t\t\t{...getDataAttr()}\n-\t\t\tdata-sb-n\n \t\t\t{...prop}\n \t\t\tset:html={num}\n \t\t/>\n \t)\n"
                },
                {
                    "date": 1689046541017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr(\"link\")}\n+\t\t\t{...(getDataAttr(\"link\"))}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689046563204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \t\t\t<span\n \t\t\t\t{...attrs}\n \t\t\t\tclass:list={classes}\n \t\t\t\t{...mapDataset(dataset)}\n-\t\t\t\t{...getDataAttr()}\n+\t\t\t\t{...getDataAttr(\"\")}\n \t\t\t\t{...prop}\n \t\t\t\tset:html={num}\n \t\t\t/>\n \t\t</a>\n@@ -69,9 +69,9 @@\n \t\t<span\n \t\t\t{...attrs}\n \t\t\tclass:list={classes}\n \t\t\t{...mapDataset(dataset)}\n-\t\t\t{...getDataAttr()}\n+\t\t\t{...getDataAttr(\"\")}\n \t\t\t{...prop}\n \t\t\tset:html={num}\n \t\t/>\n \t)\n"
                },
                {
                    "date": 1689046572365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...(getDataAttr(\"link\"))}\n+\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689046604248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+---\n+import type { NumberProps as Props } from \"../../types\";\n+import type { NumberFormatOptions } from \"./types\";\n+import mapDataset from \"../../utilities/mapDataset\";\n+import type { HTMLAttributes } from \"astro/types\";\n+\n+const {\n+\t[\"class:list\"]: classList = [],\n+\tdataset,\n+\titemprop,\n+\tlink = {},\n+\tlocales = [\"en-US\"],\n+\toptions = {},\n+\ttype = \"Number\",\n+\tuseTabularNumerals,\n+\tvalue,\n+\t...attrs\n+} = Astro.props;\n+\n+useTabularNumerals && import(\"./index.css\");\n+\n+const {\n+\t[\"class:list\"]: linkClassList = [],\n+\tdataset: linkDataset,\n+\thref,\n+\t...linkAttrs\n+} = link as BaseAttributes;\n+\n+const classes = [\n+\t`sb-${type.toLowerCase()}`,\n+\t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n+\t...classList,\n+];\n+const ext =\n+\ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n+const val = typeof value === \"number\" ? value : parseFloat(String(value));\n+\n+function getDataAttr (val = \"\") {\n+\treturn { [`data-sb-${type.toLowerCase()}`]: val }\n+}\n+const num = Number.isNaN(val)\n+\t? await Astro.slots.render(\"default\")\n+\t: new Intl.NumberFormat(locales, options).format(val as number);\n+const prop = itemprop\n+\t? { itemprop, itemtype: `https://schema.org/${type}` }\n+\t: {};\n+---\n+\n+{\n+\tlink ? (\n+\t\t<a\n+\t\t\t{...linkAttrs}\n+\t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n+\t\t\t{...mapDataset(linkDataset)}\n+\t\t\t{...getDataAttr(\"link\")}\n+\t\t\t{href}\n+\t\t\t{...ext}\n+\t\t>\n+\t\t\t<span\n+\t\t\t\t{...attrs}\n+\t\t\t\tclass:list={classes}\n+\t\t\t\t{...mapDataset(dataset)}\n+\t\t\t\t{...getDataAttr()}\n+\t\t\t\t{...prop}\n+\t\t\t\tset:html={num}\n+\t\t\t/>\n+\t\t</a>\n+\t) : (\n+\t\t<span\n+\t\t\t{...attrs}\n+\t\t\tclass:list={classes}\n+\t\t\t{...mapDataset(dataset)}\n+\t\t\t{...getDataAttr()}\n+\t\t\t{...prop}\n+\t\t\tset:html={num}\n+\t\t/>\n+\t)\n+}\n"
                },
                {
                    "date": 1689046645026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,17 +51,15 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n \t\t\t\t{...attrs}\n \t\t\t\tclass:list={classes}\n \t\t\t\t{...mapDataset(dataset)}\n-\t\t\t\t{...getDataAttr()}\n \t\t\t\t{...prop}\n \t\t\t\tset:html={num}\n \t\t\t/>\n \t\t</a>\n@@ -69,88 +67,9 @@\n \t\t<span\n \t\t\t{...attrs}\n \t\t\tclass:list={classes}\n \t\t\t{...mapDataset(dataset)}\n-\t\t\t{...getDataAttr()}\n \t\t\t{...prop}\n \t\t\tset:html={num}\n \t\t/>\n \t)\n }\n----\n-import type { NumberProps as Props } from \"../../types\";\n-import type { NumberFormatOptions } from \"./types\";\n-import mapDataset from \"../../utilities/mapDataset\";\n-import type { HTMLAttributes } from \"astro/types\";\n-\n-const {\n-\t[\"class:list\"]: classList = [],\n-\tdataset,\n-\titemprop,\n-\tlink = {},\n-\tlocales = [\"en-US\"],\n-\toptions = {},\n-\ttype = \"Number\",\n-\tuseTabularNumerals,\n-\tvalue,\n-\t...attrs\n-} = Astro.props;\n-\n-useTabularNumerals && import(\"./index.css\");\n-\n-const {\n-\t[\"class:list\"]: linkClassList = [],\n-\tdataset: linkDataset,\n-\thref,\n-\t...linkAttrs\n-} = link as BaseAttributes;\n-\n-const classes = [\n-\t`sb-${type.toLowerCase()}`,\n-\t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n-\t...classList,\n-];\n-const ext =\n-\ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n-const val = typeof value === \"number\" ? value : parseFloat(String(value));\n-\n-function getDataAttr (val = \"\") {\n-\treturn { [`data-sb-${type.toLowerCase()}`]: val }\n-}\n-const num = Number.isNaN(val)\n-\t? await Astro.slots.render(\"default\")\n-\t: new Intl.NumberFormat(locales, options).format(val as number);\n-const prop = itemprop\n-\t? { itemprop, itemtype: `https://schema.org/${type}` }\n-\t: {};\n----\n-\n-{\n-\tlink ? (\n-\t\t<a\n-\t\t\t{...linkAttrs}\n-\t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n-\t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr(\"link\")}\n-\t\t\t{href}\n-\t\t\t{...ext}\n-\t\t>\n-\t\t\t<span\n-\t\t\t\t{...attrs}\n-\t\t\t\tclass:list={classes}\n-\t\t\t\t{...mapDataset(dataset)}\n-\t\t\t\t{...getDataAttr(\"\")}\n-\t\t\t\t{...prop}\n-\t\t\t\tset:html={num}\n-\t\t\t/>\n-\t\t</a>\n-\t) : (\n-\t\t<span\n-\t\t\t{...attrs}\n-\t\t\tclass:list={classes}\n-\t\t\t{...mapDataset(dataset)}\n-\t\t\t{...getDataAttr(\"\")}\n-\t\t\t{...prop}\n-\t\t\tset:html={num}\n-\t\t/>\n-\t)\n-}\n"
                },
                {
                    "date": 1689046677997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (val = \"\") {\n-\treturn { [`data-sb-${type.toLowerCase()}`]: val }\n+\treturn { \"data-sb-number\": val }\n }\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n@@ -51,8 +51,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n+\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689046699063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n const ext =\n \ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n-function getDataAttr (val = \"\") {\n+function getDataAttr (val) {\n \treturn { \"data-sb-number\": val }\n }\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n"
                },
                {
                    "date": 1689046722263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (val) {\n-\treturn { \"data-sb-number\": val }\n+\treturn { \"data-sb-number\": `${val}`` }\n }\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n"
                },
                {
                    "date": 1689046734623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (val) {\n-\treturn { \"data-sb-number\": `${val}`` }\n+\treturn {}\n }\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n"
                },
                {
                    "date": 1689046758753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,8 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689046774778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n+\t\t\tdata-sb-number=\"link\"\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689046862766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,17 +18,19 @@\n } = Astro.props;\n \n useTabularNumerals && import(\"./index.css\");\n \n+const sbType = `sb-${type.toLocaleLowercase()}`\n+\n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n \thref,\n \t...linkAttrs\n } = link as BaseAttributes;\n \n const classes = [\n-\t`sb-${type.toLowerCase()}`,\n+\tsbType,\n \t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n \t...classList,\n ];\n const ext =\n"
                },
                {
                    "date": 1689046880820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\tdata-sb-number=\"link\"\n+\t\t\t{...getDataAttr()}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689046919320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n const ext =\n \ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n-function getDataAttr (val) {\n-\treturn {}\n+function getDataAttr (str) {\n+\treturn { [sbType]: str };\n }\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n"
                },
                {
                    "date": 1689046926726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr()}\n+\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689046960732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n const ext =\n \ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n-function getDataAttr (str) {\n-\treturn { [sbType]: str };\n+function getDataAttr (str?: string) {\n+\treturn { [sbType]: str || \"\" };\n }\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n"
                },
                {
                    "date": 1689046989543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n \n function getDataAttr (str?: string) {\n \treturn { [sbType]: str || \"\" };\n }\n+console.log(\"sb\", getDataAttr(\"link\"))\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n@@ -53,9 +54,8 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689047387545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n } = Astro.props;\n \n useTabularNumerals && import(\"./index.css\");\n \n-const sbType = `sb-${type.toLocaleLowercase()}`\n+const sbType = `sb-${type.toLocaleLowerCase()}`\n \n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n"
                },
                {
                    "date": 1689047410308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n \t...classList,\n ];\n const ext =\n-\ta?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\n+\thref.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (str?: string) {\n \treturn { [sbType]: str || \"\" };\n"
                },
                {
                    "date": 1689047419624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n \t...classList,\n ];\n const ext =\n-\thref.includes(\"://\") ? { rel: \"external\" } : {};\n+\thref?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (str?: string) {\n \treturn { [sbType]: str || \"\" };\n"
                },
                {
                    "date": 1689047429399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n ---\n import type { NumberProps as Props } from \"../../types\";\n import type { NumberFormatOptions } from \"./types\";\n+import createClassList from \"../../utilities/createClassList\";\n import mapDataset from \"../../utilities/mapDataset\";\n import type { HTMLAttributes } from \"astro/types\";\n \n const {\n"
                },
                {
                    "date": 1689047542134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,11 @@\n \thref?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (str?: string) {\n-\treturn { [sbType]: str || \"\" };\n+\treturn { [`data-${sbType}`]: str || \"\" };\n }\n-console.log(\"sb\", getDataAttr(\"link\"))\n+const sb = getDataAttr(\"link\"))\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n"
                },
                {
                    "date": 1689047559651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \thref?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (str?: string) {\n-\treturn { [`data-${sbType}`]: str || \"\" };\n+\treturn { [`data-${sbType}`]: \"\" };\n }\n const sb = getDataAttr(\"link\"))\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n"
                },
                {
                    "date": 1689047569359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n function getDataAttr (str?: string) {\n \treturn { [`data-${sbType}`]: \"\" };\n }\n-const sb = getDataAttr(\"link\"))\n+console.log(\"sb\", getDataAttr(\"link\"))\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n"
                },
                {
                    "date": 1689047605026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n+\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689047631787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr(\"link\")}\n+\t\t\t{...getDataAttr(\"\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689047709525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n function getDataAttr (str?: string) {\n \treturn { [`data-${sbType}`]: \"\" };\n }\n console.log(\"sb\", getDataAttr(\"link\"))\n+console.log(\"d\", mapDataset(linkDataset))\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n@@ -55,9 +56,8 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...getDataAttr(\"\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689047786107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n function getDataAttr (str?: string) {\n \treturn { [`data-${sbType}`]: \"\" };\n }\n console.log(\"sb\", getDataAttr(\"link\"))\n-console.log(\"d\", mapDataset(linkDataset))\n+console.log(\"d\", mapDataset(dataset))\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n"
                },
                {
                    "date": 1689047827293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n+\t\t\t{...{ 'data-sb-number': '' }}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689047840813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...{ 'data-sb-number': '' }}\n+\t\t\t{...{ 'data-sb-number': 'link' }}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689047870997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \thref?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (str?: string) {\n-\treturn { [`data-${sbType}`]: \"\" };\n+\treturn { [`data-${sbType}`]: str };\n }\n console.log(\"sb\", getDataAttr(\"link\"))\n console.log(\"d\", mapDataset(dataset))\n const num = Number.isNaN(val)\n"
                },
                {
                    "date": 1689047910054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,10 +40,9 @@\n \n function getDataAttr (str?: string) {\n \treturn { [`data-${sbType}`]: str };\n }\n-console.log(\"sb\", getDataAttr(\"link\"))\n-console.log(\"d\", mapDataset(dataset))\n+\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n@@ -56,9 +55,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...{ 'data-sb-number': 'link' }}\n+\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689047980768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \thref?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n function getDataAttr (str?: string) {\n-\treturn { [`data-${sbType}`]: str };\n+\treturn { \"data-sb-number\": \"link\" };\n }\n \n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n"
                },
                {
                    "date": 1689047997742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n const ext =\n \thref?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n-function getDataAttr (str?: string) {\n+function getDataAttr () {\n \treturn { \"data-sb-number\": \"link\" };\n }\n \n const num = Number.isNaN(val)\n"
                },
                {
                    "date": 1689048382121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,12 +37,8 @@\n const ext =\n \thref?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n-function getDataAttr () {\n-\treturn { \"data-sb-number\": \"link\" };\n-}\n-\n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n \t: new Intl.NumberFormat(locales, options).format(val as number);\n const prop = itemprop\n@@ -53,10 +49,11 @@\n {\n \tlink ? (\n \t\t<a\n \t\t\t{...linkAttrs}\n-\t\t\tclass:list={createClassList(\"sb-book-title-link\", linkClassList)}\n+\t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n+\t\t\t\t{...mapDataset({ \"data-sb-number\": \"link\" })}\n \t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n"
                },
                {
                    "date": 1689048393988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,8 @@\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n \t\t\t\t{...mapDataset({ \"data-sb-number\": \"link\" })}\n-\t\t\t{...getDataAttr(\"link\")}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689048403190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,8 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t\t{...mapDataset({ \"data-sb-number\": \"link\" })}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689048443833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n \n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n+const data = { \"data-sb-number\": \"link\" };\n \n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n@@ -51,8 +52,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n+\t\t\t{...mapDataset(data)}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689048501028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n-const data = { \"data-sb-number\": \"link\" };\n+const data = { [sbType]: \"link\" };\n \n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n"
                },
                {
                    "date": 1689048525835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n-const data = { [sbType]: \"link\" };\n+const data = (str) => { [sbType]: str };\n \n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n"
                },
                {
                    "date": 1689048536507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n-const data = (str) => { [sbType]: str };\n+const data = (str = \"\") => { [sbType]: str };\n \n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n"
                },
                {
                    "date": 1689048547256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n-const data = (str = \"\") => { [sbType]: str };\n+const data = (str = \"\") => ({ [sbType]: str });\n \n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n"
                },
                {
                    "date": 1689048588831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...mapDataset(data)}\n+\t\t\t{...mapDataset(data())}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689048597061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...mapDataset(data())}\n+\t\t\t{...mapDataset(data(\"link\"))}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689048605894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...mapDataset(data(\"link\"))}\n+\t\t\t{...mapDataset(data(\"lin\"))}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689048676512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n \n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n-const data = (str = \"\") => ({ [sbType]: str });\n+const data = { [sbType]: \"\" };\n+const linkData = { [sbType]: \"link\" };\n \n const {\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n@@ -52,9 +53,9 @@\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...mapDataset(data(\"lin\"))}\n+\t\t\t{...mapDataset(linkData)}\n \t\t\t{href}\n \t\t\t{...ext}\n \t\t>\n \t\t\t<span\n"
                },
                {
                    "date": 1689048697425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n \t\t\t<span\n \t\t\t\t{...attrs}\n \t\t\t\tclass:list={classes}\n \t\t\t\t{...mapDataset(dataset)}\n+\t\t\t{...mapDataset(data)}\n \t\t\t\t{...prop}\n \t\t\t\tset:html={num}\n \t\t\t/>\n \t\t</a>\n@@ -70,8 +71,9 @@\n \t\t<span\n \t\t\t{...attrs}\n \t\t\tclass:list={classes}\n \t\t\t{...mapDataset(dataset)}\n+\t\t\t{...mapDataset(data)}\n \t\t\t{...prop}\n \t\t\tset:html={num}\n \t\t/>\n \t)\n"
                },
                {
                    "date": 1689048702689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \t\t\t<span\n \t\t\t\t{...attrs}\n \t\t\t\tclass:list={classes}\n \t\t\t\t{...mapDataset(dataset)}\n-\t\t\t{...mapDataset(data)}\n+\t\t\t\t{...mapDataset(data)}\n \t\t\t\t{...prop}\n \t\t\t\tset:html={num}\n \t\t\t/>\n \t\t</a>\n"
                },
                {
                    "date": 1689049957277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \t: {};\n ---\n \n {\n-\tlink ? (\n+\thref ? (\n \t\t<a\n \t\t\t{...linkAttrs}\n \t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n \t\t\t{...mapDataset(linkDataset)}\n"
                },
                {
                    "date": 1689051109864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,10 @@\n \tvalue,\n \t...attrs\n } = Astro.props;\n \n+console.log(\"yo value\", value)\n+\n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n const data = { [sbType]: \"\" };\n"
                },
                {
                    "date": 1689115431158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,8 @@\n \tvalue,\n \t...attrs\n } = Astro.props;\n \n-console.log(\"yo value\", value)\n-\n useTabularNumerals && import(\"./index.css\");\n \n const sbType = `sb-${type.toLocaleLowerCase()}`\n const data = { [sbType]: \"\" };\n@@ -43,9 +41,9 @@\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n-\t: new Intl.NumberFormat(locales, options).format(val as number);\n+\t: new Intl.NumberFormat(locales, { ...options, maximumSi).format(val as number);\n const prop = itemprop\n \t? { itemprop, itemtype: `https://schema.org/${type}` }\n \t: {};\n ---\n"
                },
                {
                    "date": 1689115660357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n ---\n import type { NumberProps as Props } from \"../../types\";\n-import type { NumberFormatOptions } from \"./types\";\n import createClassList from \"../../utilities/createClassList\";\n import mapDataset from \"../../utilities/mapDataset\";\n-import type { HTMLAttributes } from \"astro/types\";\n \n const {\n \t[\"class:list\"]: classList = [],\n \tdataset,\n@@ -41,9 +39,9 @@\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n-\t: new Intl.NumberFormat(locales, { ...options, maximumSi).format(val as number);\n+\t: new Intl.NumberFormat(locales, { ...options, maximumSignificantDigits: 6).format(val as number);\n const prop = itemprop\n \t? { itemprop, itemtype: `https://schema.org/${type}` }\n \t: {};\n ---\n"
                },
                {
                    "date": 1689115678325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n-\t: new Intl.NumberFormat(locales, { ...options, maximumSignificantDigits: 6).format(val as number);\n+\t: new Intl.NumberFormat(locales, { ...options, maximumSignificantDigits: 6 }).format(val as number);\n const prop = itemprop\n \t? { itemprop, itemtype: `https://schema.org/${type}` }\n \t: {};\n ---\n"
                },
                {
                    "date": 1689115689038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n } = Astro.props;\n \n useTabularNumerals && import(\"./index.css\");\n \n-const sbType = `sb-${type.toLocaleLowerCase()}`\n+const sbType = `sb-${type.toLocaleLowerCase()}`;\n const data = { [sbType]: \"\" };\n const linkData = { [sbType]: \"link\" };\n \n const {\n@@ -33,15 +33,17 @@\n \tsbType,\n \t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n \t...classList,\n ];\n-const ext =\n-\thref?.includes(\"://\") ? { rel: \"external\" } : {};\n+const ext = href?.includes(\"://\") ? { rel: \"external\" } : {};\n const val = typeof value === \"number\" ? value : parseFloat(String(value));\n \n const num = Number.isNaN(val)\n \t? await Astro.slots.render(\"default\")\n-\t: new Intl.NumberFormat(locales, { ...options, maximumSignificantDigits: 6 }).format(val as number);\n+\t: new Intl.NumberFormat(locales, {\n+\t\t\t...options,\n+\t\t\tmaximumSignificantDigits: 6,\n+\t  }).format(val as number);\n const prop = itemprop\n \t? { itemprop, itemtype: `https://schema.org/${type}` }\n \t: {};\n ---\n"
                },
                {
                    "date": 1689115807266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+---\n+import type { NumberProps as Props } from \"../../types\";\n+import createClassList from \"../../utilities/createClassList\";\n+import mapDataset from \"../../utilities/mapDataset\";\n+\n+const {\n+\t[\"class:list\"]: classList = [],\n+\tdataset,\n+\titemprop,\n+\tlink = {},\n+\tlocales = [\"en-US\"],\n+\toptions = {},\n+\ttype = \"Number\",\n+\tuseTabularNumerals,\n+\tvalue,\n+\t...attrs\n+} = Astro.props;\n+\n+useTabularNumerals && import(\"./index.css\");\n+\n+const sbType = `sb-${type.toLocaleLowerCase()}`;\n+const data = { [sbType]: \"\" };\n+const linkData = { [sbType]: \"link\" };\n+\n+const {\n+\t[\"class:list\"]: linkClassList = [],\n+\tdataset: linkDataset,\n+\thref,\n+\t...linkAttrs\n+} = link as BaseAttributes;\n+\n+const classes = [\n+\tsbType,\n+\t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n+\t...classList,\n+];\n+const ext = href?.includes(\"://\") ? { rel: \"external\" } : {};\n+const val = typeof value === \"number\" ? value : parseFloat(String(value));\n+\n+const num = Number.isNaN(val)\n+\t? await Astro.slots.render(\"default\")\n+\t: new Intl.NumberFormat(locales, {\n+\t\t\t...options,\n+\t\t\tmaximumSignificantDigits: 6,\n+\t  }).format(val as number);\n+const prop = itemprop\n+\t? { itemprop, itemtype: `https://schema.org/${type}` }\n+\t: {};\n+---\n+\n+{\n+\thref ? (\n+\t\t<a\n+\t\t\t{...linkAttrs}\n+\t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n+\t\t\t{...mapDataset(linkDataset)}\n+\t\t\t{...mapDataset(linkData)}\n+\t\t\t{href}\n+\t\t\t{...ext}\n+\t\t>\n+\t\t\t<span\n+\t\t\t\t{...attrs}\n+\t\t\t\tclass:list={classes}\n+\t\t\t\t{...mapDataset(dataset)}\n+\t\t\t\t{...mapDataset(data)}\n+\t\t\t\t{...prop}\n+\t\t\t\tset:html={num}\n+\t\t\t/>\n+\t\t</a>\n+\t) : (\n+\t\t<span\n+\t\t\t{...attrs}\n+\t\t\tclass:list={classes}\n+\t\t\t{...mapDataset(dataset)}\n+\t\t\t{...mapDataset(data)}\n+\t\t\t{...prop}\n+\t\t\tset:html={num}\n+\t\t/>\n+\t)\n+}\n"
                },
                {
                    "date": 1689116038299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,84 +77,4 @@\n \t\t\tset:html={num}\n \t\t/>\n \t)\n }\n----\n-import type { NumberProps as Props } from \"../../types\";\n-import createClassList from \"../../utilities/createClassList\";\n-import mapDataset from \"../../utilities/mapDataset\";\n-\n-const {\n-\t[\"class:list\"]: classList = [],\n-\tdataset,\n-\titemprop,\n-\tlink = {},\n-\tlocales = [\"en-US\"],\n-\toptions = {},\n-\ttype = \"Number\",\n-\tuseTabularNumerals,\n-\tvalue,\n-\t...attrs\n-} = Astro.props;\n-\n-useTabularNumerals && import(\"./index.css\");\n-\n-const sbType = `sb-${type.toLocaleLowerCase()}`;\n-const data = { [sbType]: \"\" };\n-const linkData = { [sbType]: \"link\" };\n-\n-const {\n-\t[\"class:list\"]: linkClassList = [],\n-\tdataset: linkDataset,\n-\thref,\n-\t...linkAttrs\n-} = link as BaseAttributes;\n-\n-const classes = [\n-\tsbType,\n-\t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n-\t...classList,\n-];\n-const ext = href?.includes(\"://\") ? { rel: \"external\" } : {};\n-const val = typeof value === \"number\" ? value : parseFloat(String(value));\n-\n-const num = Number.isNaN(val)\n-\t? await Astro.slots.render(\"default\")\n-\t: new Intl.NumberFormat(locales, {\n-\t\t\t...options,\n-\t\t\tmaximumSignificantDigits: 6,\n-\t  }).format(val as number);\n-const prop = itemprop\n-\t? { itemprop, itemtype: `https://schema.org/${type}` }\n-\t: {};\n----\n-\n-{\n-\thref ? (\n-\t\t<a\n-\t\t\t{...linkAttrs}\n-\t\t\tclass:list={createClassList(`${sbType}-link`, linkClassList)}\n-\t\t\t{...mapDataset(linkDataset)}\n-\t\t\t{...mapDataset(linkData)}\n-\t\t\t{href}\n-\t\t\t{...ext}\n-\t\t>\n-\t\t\t<span\n-\t\t\t\t{...attrs}\n-\t\t\t\tclass:list={classes}\n-\t\t\t\t{...mapDataset(dataset)}\n-\t\t\t\t{...mapDataset(data)}\n-\t\t\t\t{...prop}\n-\t\t\t\tset:html={num}\n-\t\t\t/>\n-\t\t</a>\n-\t) : (\n-\t\t<span\n-\t\t\t{...attrs}\n-\t\t\tclass:list={classes}\n-\t\t\t{...mapDataset(dataset)}\n-\t\t\t{...mapDataset(data)}\n-\t\t\t{...prop}\n-\t\t\tset:html={num}\n-\t\t/>\n-\t)\n-}\n"
                },
                {
                    "date": 1689116268579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n ---\n import type { NumberProps as Props } from \"../../types\";\n import createClassList from \"../../utilities/createClassList\";\n import mapDataset from \"../../utilities/mapDataset\";\n+import type { BaseAttributes } from \"../../types/html\"\n \n const {\n \t[\"class:list\"]: classList = [],\n \tdataset,\n"
                },
                {
                    "date": 1689116312893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ---\n import type { NumberProps as Props } from \"../../types\";\n import createClassList from \"../../utilities/createClassList\";\n import mapDataset from \"../../utilities/mapDataset\";\n-import type { BaseAttributes } from \"../../types/html\"\n+import type { BaseAttributes } from \"../../types/html\";\n \n const {\n \t[\"class:list\"]: classList = [],\n \tdataset,\n"
                },
                {
                    "date": 1689117510710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n ---\n import type { NumberProps as Props } from \"../../types\";\n import createClassList from \"../../utilities/createClassList\";\n import mapDataset from \"../../utilities/mapDataset\";\n-import type { BaseAttributes } from \"../../types/html\";\n+import type { LinkAttributes } from \"../../types\";\n \n const {\n \t[\"class:list\"]: classList = [],\n \tdataset,\n@@ -27,9 +27,9 @@\n \t[\"class:list\"]: linkClassList = [],\n \tdataset: linkDataset,\n \thref,\n \t...linkAttrs\n-} = link as BaseAttributes;\n+} = link as LinkAttributes;\n \n const classes = [\n \tsbType,\n \t...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n"
                },
                {
                    "date": 1689118313992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n \t: new Intl.NumberFormat(locales, {\n \t\t\t...options,\n \t\t\tmaximumSignificantDigits: 6,\n \t  }).format(val as number);\n+\n const prop = itemprop\n \t? { itemprop, itemtype: `https://schema.org/${type}` }\n \t: {};\n ---\n"
                }
            ],
            "date": 1689031744850,
            "name": "Commit-0",
            "content": "---\nimport type { Dataset } from \"../../types\";\nimport type { NumberFormatOptions } from \"./types\";\nimport mapDataset from \"../../utilities/mapDataset\";\nimport type { HTMLAttributes } from \"astro/types\";\n\nexport type Props = HTMLAttributes<\"span\"> & {\n  a?: Partial<HTMLAttributes<\"a\">>;\n  cssClasses?: Array<string>;\n  dataset?: Dataset;\n  locale?: string;\n  options?: NumberFormatOptions;\n  type?: \"Number\" | \"Integer\" | \"Float\";\n  useTabularNumerals?: boolean | undefined;\n  value?: string | number | undefined;\n};\n\nconst {\n  a,\n\t[\"class:list\"]: classList = [],\n  dataset,\n  itemprop,\n  locale = \"en-US\",\n  options = {},\n  type = \"Number\",\n  useTabularNumerals,\n  value,\n  ...attrs\n} = Astro.props;\n\nuseTabularNumerals && import(\"./index.css\");\n\nconsole.log(\"useTabularNumerals\", useTabularNumerals);\n\nconst css = [\n  \"sb-number\",\n  ...(useTabularNumerals ? [\"sb-tabular-nums\"] : []),\n  ...cssClasses,\n].join(\" \");\nconst ext =\n  a?.href && (a?.href as string).includes(\"://\") ? { rel: \"external\" } : {};\nconst data = mapDataset(dataset);\nconst val = typeof value === \"number\" ? value : parseFloat(String(value));\nconst { rel, ...linkAttrs } = a || {};\n\nconst num = Number.isNaN(val)\n  ? await Astro.slots.render(\"default\")\n  : new Intl.NumberFormat(locale, options).format(val as number);\nconst prop = itemprop\n  ? { itemprop, itemtype: `https://schema.org/${type}` }\n  : {};\n---\n\n{\n  a ? (\n    <a href={a.href} {...ext} {...linkAttrs}>\n      <span class={css} {...data} {...prop} {...attrs} set:html={num} />\n    </a>\n  ) : (\n    <span class={css} {...data} {...prop} {...attrs} set:html={num} />\n  )\n}\n"
        }
    ]
}