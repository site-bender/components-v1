{
	"sourceFile": "src/CodeBlock/index.astro",
	"activeCommit": 0,
	"commits": [
		{
			"activePatchIndex": 2,
			"patches": [
				{
					"date": 1688940843252,
					"content": "Index: \n===================================================================\n--- \n+++ \n"
				},
				{
					"date": 1689031599633,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,8 @@\n \n export type Props<T> = {\n \tcaption?: string;\n \tcount?: number;\n-\tcssClasses?: Array<string>;\n \tdataset?: Dataset | undefined;\n \tfigcaptionAttributes?: HTMLAttributes<\"figcaption\">;\n \tindex?: number;\n \tisIndexed?: boolean;\n"
				},
				{
					"date": 1689031655219,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n const {\n \tcaption,\n \tcount,\n-\tcssClasses = [],\n+\t[\"class:list\"]: classList = [],\n \tdataset,\n \tfigcaptionAttributes = {},\n \tindex,\n \tisIndexed,\n"
				}
			],
			"date": 1688940843252,
			"name": "Commit-0",
			"content": "---\nimport type { HTMLAttributes } from \"astro/types\";\nimport type { Dataset } from \"../types\";\nimport getLineNumberingWidth from \"../utilities/getLineNumberingWidth\";\nimport mapDataset from \"../utilities/mapDataset\";\nimport Microdata from \"../Microdata/index.astro\";\nimport type { SoftwareSourceCode } from \"../schema.org\";\nimport \"./index.css\";\n\nexport type Frontmatter = {\n  anchor?: string;\n  aria?: string;\n  blurb?: string;\n  client?: string;\n  content?: Array<string>;\n  dataset?: Dataset;\n  description?: string;\n  label?: string;\n  layout?: string;\n  page?: string;\n  publishedOn?: string;\n  rel?: string;\n  tags?: Array<string>;\n  thumbnail?: string;\n  title?: string;\n};\n\nexport type MDXInstance<T> = {\n  compiledContent: () => string;\n  file: string;\n  frontmatter: T;\n  publishedOn?: string;\n  rawContent: () => string;\n  title?: string;\n  url: string | undefined;\n};\n\nexport type Props<T> = {\n  caption?: string;\n  count?: number;\n  cssClasses?: Array<string>;\n  dataset?: Dataset | undefined;\n  figcaptionAttributes?: HTMLAttributes<\"figcaption\">;\n  index?: number;\n  isIndexed?: boolean;\n  properties?: Partial<SoftwareSourceCode>;\n  snippet: MDXInstance<T>;\n};\n\nconst {\n  caption,\n  count,\n  cssClasses = [],\n  dataset,\n  figcaptionAttributes = {},\n  index,\n  isIndexed,\n  properties,\n  snippet,\n  style: styl = \"\",\n  ...attrs\n} = Astro.props;\n\nconst indexed = isIndexed ? { class: \"indexed\" } : {};\nconst cap =\n  caption ||\n  snippet.frontmatter.caption ||\n  (await Astro.slots.render(\"caption\"));\nconst css = [\"sb-code-block-figure\", ...cssClasses].join(\" \");\nconst data = mapDataset(dataset);\nconst digits = count || getLineNumberingWidth(snippet.rawContent());\nconst style = `${styl} --line-number-width: ${digits * 1.5}ch;`;\n\nconst meta = {\n  type: \"SoftwareSourceCode\",\n  ...properties,\n};\n---\n\n<Microdata\n  as=\"figure\"\n  class={css}\n  properties={meta}\n  {...data}\n  {...indexed}\n  {style}\n  {...attrs}\n>\n  {\n    cap && (\n      <figcaption {...figcaptionAttributes}>\n        {index ? `Figure ${index}: ` : \"\"}\n        <Fragment set:html={cap} />\n      </figcaption>\n    )\n  }\n  <Fragment set:html={snippet.compiledContent()} />\n</Microdata>\n"
		}
	]
}
