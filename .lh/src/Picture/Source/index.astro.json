{
	"sourceFile": "src/Picture/Source/index.astro",
	"activeCommit": 0,
	"commits": [
		{
			"activePatchIndex": 1,
			"patches": [
				{
					"date": 1688955458757,
					"content": "Index: \n===================================================================\n--- \n+++ \n"
				},
				{
					"date": 1688955839065,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,8 @@\n ---\n-import type { ImageSource, ImageType } from \"../types\";\n+import type { ImageType } from \"../types\";\n import { DEFAULT_IMAGE_TYPES } from \"../../constants\";\n \n-export type CreatePath = (\n-\tfilename: string,\n-\tsize: string,\n-\ttype: string,\n-\tindex: number\n-) => string;\n-\n-export type Props = {\n-\tcreatePath: CreatePath | undefined;\n-\tfilename: string;\n-\tsource: ImageSource;\n-};\n-\n function makePath(filename: string, size: string, type: string, index: number) {\n \treturn `/images/${size}/${filename}.${type} ${index + 1}x`;\n }\n \n@@ -36,10 +23,10 @@\n \t\t)\n \t\t.join(\", \");\n }\n \n-const sources = types.map((type) => ({\n-\t...(media ? { media } : {}),\n+const sources = types.map((type: ImageType) => ({\n+\tmedia,\n \tsrcset: getSrcset(filename, type as ImageType, sizes),\n \ttype: `image/${type.toString()}`,\n }));\n ---\n"
				}
			],
			"date": 1688955458757,
			"name": "Commit-0",
			"content": "---\nimport type { ImageSource, ImageType } from \"../types\";\nimport { DEFAULT_IMAGE_TYPES } from \"../../constants\";\n\nexport type CreatePath = (\n  filename: string,\n  size: string,\n  type: string,\n  index: number\n) => string;\n\nexport type Props = {\n  createPath: CreatePath | undefined;\n  filename: string;\n  source: ImageSource;\n};\n\nfunction makePath(filename: string, size: string, type: string, index: number) {\n  return `/images/${size}/${filename}.${type} ${index + 1}x`;\n}\n\nconst {\n  createPath = makePath,\n  filename,\n  source: { media, sizes, types = DEFAULT_IMAGE_TYPES },\n} = Astro.props;\n\nfunction getSrcset(\n  filename: string,\n  type: ImageType,\n  sizes: Array<string>\n): string {\n  return sizes\n    .map((size: string, index: number) =>\n      createPath(filename, size, type, index)\n    )\n    .join(\", \");\n}\n\nconst sources = types.map((type) => ({\n  ...(media ? { media } : {}),\n  srcset: getSrcset(filename, type as ImageType, sizes),\n  type: `image/${type.toString()}`,\n}));\n---\n\n<>\n  {sources.map((attrs) => <source {...attrs} />)}\n</>\n"
		}
	]
}
