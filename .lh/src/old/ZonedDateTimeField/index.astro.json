{
	"sourceFile": "src/old/ZonedDateTimeField/index.astro",
	"activeCommit": 0,
	"commits": [
		{
			"activePatchIndex": 2,
			"patches": [
				{
					"date": 1688940959500,
					"content": "Index: \n===================================================================\n--- \n+++ \n"
				},
				{
					"date": 1688942597729,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n   fieldType=\"sb-zoned-date-time\"\n   {...help ? { help } : {}}\n   helpId={helpId}\n   id={id as string}\n-  label={label}\n+  {label}\n   labelId={labelId}\n   {...messages ? { messages } : {}}\n   name={attrs.name}\n   readonly={readonly}\n"
				},
				{
					"date": 1688942636312,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n   {label}\n   labelId={labelId}\n   {...messages ? { messages } : {}}\n   name={attrs.name}\n-  readonly={readonly}\n+  {readonly}\n   {...attrs.required ? { required: true } : {}}\n >\n   <Fragment slot=\"element\">\n     {\n"
				}
			],
			"date": 1688940959500,
			"name": "Commit-0",
			"content": "---\nimport { Intl, Temporal } from \"@js-temporal/polyfill\";\nimport { TIME_ZONE } from \"../../constants\";\nimport FieldWrapper from \"../FieldWrapper/index.astro\";\nimport generateShortId from \"../../utilities/generateShortId\";\nimport mapDataset from \"../../utilities/mapDataset\";\nimport type {\n  Calendar,\n  DateTimeFormatOptions,\n  Dataset,\n  Messages,\n} from \"../../types\";\nimport type { HTMLAttributes } from \"astro/types\";\nimport ZonedDateTime from \"../../metadata/ZonedDateTime/index.astro\";\n\nexport type Props = Omit<HTMLAttributes<\"input\">, \"value\" | \"slot\"> & {\n  calendar?: Calendar | Temporal.Calendar | Temporal.CalendarLike;\n  dataset?: Dataset;\n  day?: number | string;\n  era?: string | undefined;\n  eraYear?: number | undefined;\n  help?: string;\n  hour?: number | string;\n  label: string;\n  locale?: string | Array<string>;\n  messages?: Messages;\n  microsecond?: number | string;\n  millisecond?: number | string;\n  minute?: number | string;\n  month?: number | string;\n  monthCode?: string;\n  name: string;\n  nanosecond?: number | string;\n  offset?: string;\n  options?: DateTimeFormatOptions;\n  readonly?: boolean;\n  second?: number | string;\n  timeZone?: keyof typeof TIME_ZONE | Temporal.TimeZone | Temporal.TimeZoneLike;\n  value?: string | Temporal.ZonedDateTime | Temporal.ZonedDateTimeLike;\n  year?: number | string;\n};\n\nconst tz = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\nconst {\n  calendar,\n  dataset,\n  day,\n  era,\n  eraYear,\n  help,\n  hour,\n  id = `_${generateShortId()}`,\n  label,\n  locale,\n  messages,\n  microsecond,\n  millisecond,\n  minute,\n  month,\n  monthCode,\n  nanosecond,\n  offset,\n  options,\n  readonly,\n  second,\n  size,\n  timeZone = tz,\n  value: rawValue,\n  year,\n  ...attrs\n} = Astro.props;\n\nconst labelId = `${id}-label`;\nconst helpId = `${id}-help`;\nconst data = mapDataset(dataset);\n\nconst value = rawValue\n  ? Temporal.ZonedDateTime.from(rawValue)\n  : Temporal.ZonedDateTime.from({\n      ...(calendar ? { calendar: Temporal.Calendar.from(calendar) } : {}),\n      ...(day == null ? {} : { day: Number(day) }),\n      ...(era && eraYear\n        ? { era, eraYear }\n        : year == null\n        ? {}\n        : { year: Number(year) }),\n      ...(hour == null ? {} : { hour: Number(hour) }),\n      ...(microsecond == null ? {} : { microsecond: Number(microsecond) }),\n      ...(millisecond == null ? {} : { millisecond: Number(millisecond) }),\n      ...(minute == null ? {} : { minute: Number(minute) }),\n      ...(monthCode\n        ? { monthCode }\n        : month == null\n        ? {}\n        : { month: Number(month) }),\n      ...(nanosecond == null ? {} : { nanosecond: Number(nanosecond) }),\n      ...(second == null ? {} : { second: Number(second) }),\n      ...(timeZone\n        ? { timeZone: Temporal.TimeZone.from(timeZone) }\n        : offset\n        ? { offset }\n        : {}),\n    });\n---\n\n<FieldWrapper\n  fieldType=\"sb-zoned-date-time\"\n  {...help ? { help } : {}}\n  helpId={helpId}\n  id={id as string}\n  label={label}\n  labelId={labelId}\n  {...messages ? { messages } : {}}\n  name={attrs.name}\n  readonly={readonly}\n  {...attrs.required ? { required: true } : {}}\n>\n  <Fragment slot=\"element\">\n    {\n      readonly ? (\n        <div class=\"readonly sb-zoned-date-time-readonly\">\n          <ZonedDateTime {...attrs} {value} />\n        </div>\n      ) : (\n        <div class=\"multiple-input\">\n          <input\n            aria-labelledBy={`${labelId} ${helpId}`}\n            class=\"sb-zoned-date-time-datetime-input\"\n            {...data}\n            id={id as string}\n            {...attrs}\n            type=\"datetime-local\"\n            value={value ? value.toPlainDateTime().toJSON() : \"\"}\n          />\n          <select\n            aria-labelledBy={`${labelId} ${helpId}`}\n            class=\"sb-zoned-date-time-timezone-select\"\n            {...data}\n            id={`${id}-timezone`}\n            {...attrs}\n          >\n            {Object.keys(TIME_ZONE)\n              .sort()\n              .map((key) => (\n                <option\n                  selected={key === value.timeZone.toString()}\n                  value={key}\n                >\n                  {key}\n                </option>\n              ))}\n          </select>\n        </div>\n      )\n    }\n  </Fragment>\n</FieldWrapper>\n"
		}
	]
}
