{
	"sourceFile": "src/old/InstantField/index.astro",
	"activeCommit": 0,
	"commits": [
		{
			"activePatchIndex": 3,
			"patches": [
				{
					"date": 1688940756097,
					"content": "Index: \n===================================================================\n--- \n+++ \n"
				},
				{
					"date": 1688942597734,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n       fieldType=\"sb-instant\"\n       {...(help ? { help } : {})}\n       helpId={helpId}\n       id={id as string}\n-      label={label}\n+      {label}\n       labelId={labelId}\n       {...(messages ? { messages } : {})}\n       name={attrs.name}\n       readonly={readonly}\n"
				},
				{
					"date": 1688942636326,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n       {label}\n       labelId={labelId}\n       {...(messages ? { messages } : {})}\n       name={attrs.name}\n-      readonly={readonly}\n+      {readonly}\n       {...(attrs.required ? { required: true } : {})}\n     >\n       <Fragment slot=\"element\">\n         <input\n"
				},
				{
					"date": 1689031744857,
					"content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   value?: string | Temporal.Instant;\n };\n \n const {\n-  cssClasses = [],\n+\t[\"class:list\"]: classList = [],\n   dataset,\n   epochMicroseconds,\n   epochMilliseconds,\n   epochNanoseconds,\n"
				}
			],
			"date": 1688940756097,
			"name": "Commit-0",
			"content": "---\nimport \"./index.css\";\nimport { Temporal } from \"@js-temporal/polyfill\";\nimport FieldWrapper from \"../FieldWrapper/index.astro\";\nimport generateShortId from \"../../utilities/generateShortId\";\nimport Instant from \"../../metadata/Instant/index.astro\";\nimport mapDataset from \"../../utilities/mapDataset\";\nimport type { Dataset, Messages } from \"../../types\";\nimport type { HTMLAttributes } from \"astro/types\";\nimport { TIME_ZONE } from \"../../constants\";\n\nexport type Props<T> = Omit<HTMLAttributes<\"input\">, \"slot\" | \"value\"> & {\n  cssClasses?: Array<string>;\n  dataset?: Dataset;\n  epochMicroseconds?: bigint | number | undefined;\n  epochMilliseconds?: number | undefined;\n  epochNanoseconds?: bigint | number | undefined;\n  epochSeconds?: number | undefined;\n  help?: string;\n  itemprop?: string | undefined;\n  itemtype?: string;\n  label: string;\n  messages?: Messages;\n  name: string;\n  options?: Intl.DateTimeFormatOptions;\n  properties?: Partial<T>;\n  readonly?: boolean;\n  value?: string | Temporal.Instant;\n};\n\nconst {\n  cssClasses = [],\n  dataset,\n  epochMicroseconds,\n  epochMilliseconds,\n  epochNanoseconds,\n  epochSeconds,\n  help,\n  id = `_${generateShortId()}`,\n  label,\n  messages,\n  readonly,\n  size = 30,\n  value,\n  ...attrs\n} = Astro.props;\n\nconst css = [\"sb-instant-input\", ...cssClasses].join(\" \");\nconst data = mapDataset(dataset);\nconst helpId = `${id}-help`;\nconst labelId = `${id}-label`;\n\nconst instant = value\n  ? value\n  : epochNanoseconds\n  ? Temporal.Instant.fromEpochNanoseconds(BigInt(epochNanoseconds))\n  : epochMicroseconds\n  ? Temporal.Instant.fromEpochMicroseconds(BigInt(epochMicroseconds))\n  : epochMilliseconds\n  ? Temporal.Instant.fromEpochMilliseconds(epochMilliseconds)\n  : epochSeconds\n  ? Temporal.Instant.fromEpochSeconds(epochSeconds)\n  : undefined;\n\nconst { value: _value, ...readonlyProps } = Astro.props;\n\n// TODO: Add button with JS to set value to Now\n---\n\n{\n  readonly ? (\n    <Instant instant={instant} {...readonlyProps} />\n  ) : (\n    <FieldWrapper\n      fieldType=\"sb-instant\"\n      {...(help ? { help } : {})}\n      helpId={helpId}\n      id={id as string}\n      label={label}\n      labelId={labelId}\n      {...(messages ? { messages } : {})}\n      name={attrs.name}\n      readonly={readonly}\n      {...(attrs.required ? { required: true } : {})}\n    >\n      <Fragment slot=\"element\">\n        <input\n          aria-labelledBy={`${labelId} ${helpId}`}\n          class={css}\n          {...data}\n          id={id as string}\n          pattern=\"[12][0-9]{3}-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[12][0-9])))T(0[1-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]{3}|\\.[0-9]{6}|\\.[0-9]{9})?Z\"\n          {...attrs}\n          {size}\n          type=\"text\"\n          {...(instant ? { value: instant.toString() } : {})}\n        />\n      </Fragment>\n    </FieldWrapper>\n  )\n}\n<script type=\"module\" define:vars={{ id }}>\nconst input = document.querySelector(`#${id}`);\n\nif (input) {\n  const button = document.createElement(\"button\");\n\n  function setNow() {\n    input.value = new Date().toISOString();\n  }\n\n  button.setAttribute(\"type\", \"button\");\n  button.classList.add(\"sb-button\");\n  button.addEventListener(\"click\", setNow);\n  button.appendChild(document.createTextNode(\"Now\"));\n\n  input.parentNode.appendChild(button);\n}\n</script>\n"
		}
	]
}
