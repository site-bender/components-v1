import { AstroError, AstroErrorData } from "../errors/index.js";
async function callMiddleware(onRequest, apiContext, responseFunction) {
  let resolveResolve;
  new Promise((resolve) => {
    resolveResolve = resolve;
  });
  let nextCalled = false;
  const next = async () => {
    nextCalled = true;
    return await responseFunction();
  };
  let middlewarePromise = onRequest(apiContext, next);
  return await Promise.resolve(middlewarePromise).then(async (value) => {
    if (nextCalled) {
      if (typeof value !== "undefined") {
        if (value instanceof Response === false) {
          throw new AstroError(AstroErrorData.MiddlewareNotAResponse);
        }
        return value;
      } else {
        const responseResult = await responseFunction();
        return responseResult;
      }
    } else if (typeof value === "undefined") {
      throw new AstroError(AstroErrorData.MiddlewareNoDataOrNextCalled);
    } else if (value instanceof Response === false) {
      throw new AstroError(AstroErrorData.MiddlewareNotAResponse);
    } else {
      return value;
    }
  });
}
function isEndpointResult(response) {
  return response && typeof response.body !== "undefined";
}
export {
  callMiddleware
};
