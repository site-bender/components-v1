---
import exifr from "exifr";
import createClassList from "../utilities/createClassList";
import generateShortId from "../utilities/generateShortId";
import mapDataset from "../utilities/mapDataset";
import Microdata from "../Microdata/index.astro";
import type { PictureProps as Props } from "../types";
import "./index.css";

const {
  alt,
	["class:list"]: classList = [],
  createPath,
  dataset,
  description,
  descriptionClass = "off-screen",
  filename,
  height = 0,
  link = {},
  loading = "lazy",
  properties,
  sources = [],
  src,
  width,
  ...attrs
} = Astro.props;

const data = mapDataset(dataset);
const desc = (await Astro.slots.render("description")) || description;
const describedById = desc ? { describedById: generateShortId() } : {};

const tags = await exifr.parse(`public${src}`);
const aspectRatio = (tags?.ImageHeight || 0) / (tags?.ImageWidth || 1);
const h = height || Math.floor(aspectRatio * width);
const meta = {
  type: "ImageObject",
};
---

<Microdata as="span" properties={meta}>
  {
    link.href ? (
      <a {...link}>
        <picture class:list={createClassList("sb-picture", classList)} {...data}>
          {sources.map((source: ImageSource) => (
            <Source
              createPath={createPath}
              {filename}
              {source}
            />
          ))}
          <img
            {alt}
            {...describedById}
            decoding="async"
            {...(h ? { height: h } : {})}
            loading={loading}
            {src}
            {...(width != null ? { width } : {})}
            {...attrs}
          />
          {desc ? (
            <div
              class={descriptionClass}
              id={describedById?.describedById}
              set:html={desc}
            />
          ) : null}
        </picture>
      </a>
    ) : (
      <picture class:list={createClassList("sb-picture", classList)} {...data}>
        {sources.map((source: ImageSource) => (
          <Source createPath={createPath} {filename} {source} />
        ))}
        <img
          {alt}
          {...describedById}
          decoding="async"
          {...(h ? { height: h } : {})}
          loading={loading}
          {src}
          {...(width != null ? { width } : {})}
          {...attrs}
        />
        {desc ? (
          <div
            class={descriptionClass}
            id={describedById?.describedById}
            set:html={desc}
          />
        ) : null}
      </picture>
    )
  }
</Microdata>
