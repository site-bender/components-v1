---
import type { HTMLAttributes } from "astro/types";
import type { Dataset } from "../types";
import createClassList from "../utilities/createClassList";
import getLineNumberingWidth from "../utilities/getLineNumberingWidth";
import mapDataset from "../utilities/mapDataset";
import Microdata from "../Microdata/index.astro";
import type { SoftwareSourceCode } from "../schema.org";
import "./index.css";

export type Frontmatter = {
	anchor?: string;
	aria?: string;
	blurb?: string;
	client?: string;
	content?: Array<string>;
	dataset?: Dataset;
	description?: string;
	label?: string;
	layout?: string;
	page?: string;
	publishedOn?: string;
	rel?: string;
	tags?: Array<string>;
	thumbnail?: string;
	title?: string;
};

export type MDXInstance<T> = {
	compiledContent: () => string;
	file: string;
	frontmatter: T;
	publishedOn?: string;
	rawContent: () => string;
	title?: string;
	url: string | undefined;
};

export type Props<T> = {
	caption?: string;
	count?: number;
	dataset?: Dataset | undefined;
	figcaptionAttributes?: HTMLAttributes<"figcaption">;
	index?: number;
	isIndexed?: boolean;
	properties?: Partial<SoftwareSourceCode>;
	snippet: MDXInstance<T>;
};

const {
	caption,
	count,
	["class:list"]: classList = [],
	dataset,
	figcaptionAttributes = {},
	index,
	isIndexed,
	properties,
	snippet,
	style: styl = "",
	...attrs
} = Astro.props;

const indexed = isIndexed ? { class: "indexed" } : {};
const cap =
	caption ||
	snippet.frontmatter.caption ||
	(await Astro.slots.render("caption"));
const data = mapDataset(dataset);
const digits = count || getLineNumberingWidth(snippet.rawContent());
const style = `${styl} --line-number-width: ${digits * 1.5}ch;`;

const meta = {
	type: "SoftwareSourceCode",
	...properties,
};
---

<Microdata
	as="figure"
	class:list={createClassList("sb-code-block", classList)}
	properties={meta}
	{...data}
	{...indexed}
	{style}
	{...attrs}
>
	{
		cap && (
			<figcaption {...figcaptionAttributes}>
				{index ? `Figure ${index}: ` : ""}
				<Fragment set:html={cap} />
			</figcaption>
		)
	}
	<Fragment set:html={snippet.compiledContent()} />
</Microdata>
