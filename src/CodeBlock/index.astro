---
import "./index.css"
import Microdata from "../Microdata/index.astro"
import getLineNumberingWidth from "../utilities/getLineNumberingWidth"
import mapAttributes from "../utilities/mapAttributes"
import type { CodeBlockProps as Props } from "../types"

const {
	caption,
	index,
	isIndexed,
	legend = {},
	lineNumberingWidth,
	properties: props,
	snippet,
	style: styl = "",
	...attrs
} = Astro.props

const legendAttrs = mapAttributes(legend, ["sb-code-block-figcaption"])
const wrapperAttrs = mapAttributes(attrs, ["sb-code-block"])

const indexed = isIndexed ? { class: "indexed" } : {}
const cap =
	snippet.frontmatter.caption ||
	(await Astro.slots.render("caption")) ||
	caption
const digits = lineNumberingWidth || getLineNumberingWidth(snippet.rawContent())
const style = `${styl} --line-number-width: ${digits * 1.5}ch`

const properties = {
	type: "SoftwareSourceCode",
	...props,
}

const useMicrodata = Boolean(import.meta.env.USE_MICRODATA)
---

{useMicrodata ? (
	<Microdata
		{...wrapperAttrs}
		as="figure"
		data-sb-code-block
		{...indexed}
		{properties}
		{style}
	>
		{
			cap && (
				<figcaption
					{...legendAttrs}
					data-sb-code-block="figcaption"
				>
					{index ? `Figure ${index}: ` : ""}
					<Fragment set:html={cap} />
				</figcaption>
			)
		}
		<Fragment set:html={snippet.compiledContent()} />
	</Microdata>
) : (
	<figure
		{...wrapperAttrs}
		{...indexed}
		{style}
	>
		{
			cap && (
				<figcaption
					{...legendAttrs}
					data-sb-code-block="figcaption"
				>
					{index ? `Figure ${index}: ` : ""}
					<Fragment set:html={cap} />
				</figcaption>
			)
		}
		<Fragment set:html={snippet.compiledContent()} />
	</figure>
)}
