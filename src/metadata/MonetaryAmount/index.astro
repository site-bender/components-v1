---
import type { Dataset } from "../../types";
import type { MonetaryAmount } from "../../schema.org";
import type { NumberFormatOptions, NumberStyle } from "../Number/types";
import type { HTMLAttributes } from "astro/types";
import Microdata from "../../Microdata/index.astro";
import Content from "./Content/index.astro";

export type Props = HTMLAttributes<"a"> & {
  cssClasses?: Array<string>;
  dataset?: Dataset;
  href?: string | undefined;
  locale?: string;
  options?: NumberFormatOptions;
  properties?: Partial<MonetaryAmount> | undefined;
  useJsonLd?: boolean;
  useTabularNumerals?: boolean | undefined;
  value?: string | number | undefined;
};

const style: NumberStyle = "currency";

const {
  cssClasses,
  dataset,
  href = "",
  locale = "en-US",
  options = {
    currency: "USD",
    currencyDisplay: "narrowSymbol",
    style,
  },
  properties,
  type = "Number",
  useJsonLd,
  useTabularNumerals,
  value,
  ...attrs
} = Astro.props;

const val = typeof value === "number" ? value : parseFloat(String(value));
const opts = { ...options, style };

const num = Number.isNaN(val)
  ? await Astro.slots.render("default")
  : new Intl.NumberFormat(locale, opts).format(val as number);

const meta =
  typeof properties === "object"
    ? {
        "@context": "https://schema.org",
        "@type": "MonetaryAmount",
        ...(useJsonLd
          ? {}
          : { ...properties, currency: options.currency, value: val }),
      }
    : {};
---

<Microdata properties={meta}>
  <Content
    cssClasses={cssClasses}
    dataset={dataset}
    href={href}
    linkAttributes={attrs}
    num={num}
    useTabularNumerals={useTabularNumerals}
  />
  {
    useJsonLd ? (
      <script
        set:html={JSON.stringify({ ...meta, ...properties }, null, 2)}
        type="application/json+ld"
      />
    ) : null
  }
</Microdata>
