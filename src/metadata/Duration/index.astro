---
import { Temporal } from "@js-temporal/polyfill";
import createClassList from "../../utilities/createClassList";
import formatDuration from "../../utilities/formatDuration";
import mapDataset from "../../utilities/mapDataset";
import Microdata from "../../Microdata/index.astro";
import type { BaseAttributes } from "../../types/html";
import type { DurationProps as Props } from "../../types";

const {
	["class:list"]: classList = [],
	dataset,
	duration,
	itemprop = "duration",
	outer = {},
	properties = {},
	...attrs
} = Astro.props;

const {
	["class:list"]: outerClassList = [],
	dataset: outerDataset,
	...outerAttrs
} = outer as BaseAttributes;

const d = Temporal.Duration.from(duration);
const useMicrodata = Boolean(import.meta.env.USE_MICRODATA);

const meta = {
	duration,
	...properties,
};
---

{
	useMicrodata && properties.type ? (
		<Microdata
			as="time"
			{...outerAttrs}
			class:list={createClassList("sb-duration-microdata", outerClassList)}
			{...mapDataset(outerDataset)}
			data-sb-duration="microdata"
			properties={meta}
		>
			<meta
				itemprop="duration"
				itemtype="https://schema.org/Duration"
				content={duration?.toString()}
			/>
			<span
				{...attrs}
				class:list={createClassList("sb-duration", classList)}
				{...mapDataset(dataset)}
				data-sb-duration="span"
			>
				{formatDuration(d)}
			</span>
		</Microdata>
	) : (
		<time
			{...attrs}
			class:list={createClassList("sb-duration", classList)}
			{...mapDataset(dataset)}
			data-sb-duration="time"
		>
			{formatDuration(d)}
		</time>
	)
}
