---
import {
  DEFAULT_CALENDAR,
  DEFAULT_LOCALE,
  DEFAULT_TIME_ZONE,
  DEFAULT_ZONED_DATE_TIME_OPTIONS,
  TIME_ZONE,
} from "../../constants";
import { Intl, Temporal } from "@js-temporal/polyfill";
import type { Thing } from "../../schema.org";
import mapDataset from "../../utilities/mapDataset";
import type { Dataset } from "../../types";
import type { HTMLAttributes } from "astro/types";
import Microdata from "../../Microdata/index.astro";

export type Props<T extends Thing> = HTMLAttributes<"time"> & {
  calendar?: Temporal.CalendarLike;
  cssClasses?: Array<string>;
  dataset?: Dataset;
  day?: number | string;
  era?: string | undefined;
  eraYear?: number | undefined;
  hour?: number | string;
  itemprop?: string | undefined;
  locale?: string | Array<string>;
  microsecond?: number | string;
  millisecond?: number | string;
  minute?: number | string;
  month?: number | string;
  monthCode?: string;
  nanosecond?: number | string;
  offset?: string;
  options?: Intl.DateTimeFormatOptions;
  properties?: Partial<T>;
  second?: number | string;
  timeZone?: keyof typeof TIME_ZONE | Temporal.TimeZoneLike;
  itemtype?: string;
  year?: number | string;
  zonedDateTime?: string | Temporal.ZonedDateTimeLike;
};

const {
  calendar = DEFAULT_CALENDAR,
  ["class:list"]: classList = [],
  dataset,
  day,
  era,
  eraYear,
  hour = 0,
  itemprop,
  locale = DEFAULT_LOCALE,
  microsecond = 0,
  millisecond = 0,
  minute = 0,
  month,
  monthCode,
  nanosecond = 0,
  offset,
  options,
  properties,
  second = 0,
  timeZone = DEFAULT_TIME_ZONE,
  itemtype,
  year,
  zonedDateTime = Temporal.Now.zonedDateTime(
    Astro.props.calendar || DEFAULT_CALENDAR,
    Astro.props.timeZone || DEFAULT_TIME_ZONE
  ),
  ...attrs
} = Astro.props;

const css = ["sb-zoned-date-time", ...cssClasses].join(" ");
const data = mapDataset(dataset);
const value = zonedDateTime
  ? Temporal.ZonedDateTime.from(zonedDateTime)
  : Temporal.ZonedDateTime.from({
      calendar: Temporal.Calendar.from(calendar),
      ...(day == null ? {} : { day: Number(day) }),
      era,
      eraYear: eraYear ? Number(eraYear) : undefined,
      ...(hour == null ? {} : { hour: Number(hour) }),
      ...(microsecond == null ? {} : { microsecond: Number(microsecond) }),
      ...(millisecond == null ? {} : { millisecond: Number(millisecond) }),
      ...(minute == null ? {} : { minute: Number(minute) }),
      ...(monthCode
        ? { monthCode }
        : month == null
        ? {}
        : { month: Number(month) }),
      ...(nanosecond == null ? {} : { nanosecond: Number(nanosecond) }),
      ...(second == null ? {} : { second: Number(second) }),
      ...(timeZone
        ? { timeZone: Temporal.TimeZone.from(timeZone) }
        : offset
        ? { offset }
        : {}),
      ...(year == null ? {} : { year: Number(year) }),
    });

const opts = options || DEFAULT_ZONED_DATE_TIME_OPTIONS;

const label = value.toLocaleString(locale, opts);

const useMicrodata = Boolean(import.meta.env.USE_MICRODATA);
const meta = {
  type: itemtype,
  ...(itemprop ? { [itemprop]: zonedDateTime.toString() } : {}),
  ...properties,
};
---

{useMicrodata && type ? <Microdata as="span" properties={meta} /> : null}
<time class={css} {...data} datetime={value.toJSON()} {...attrs}>{label}</time>
