---
import type { NumberProps as Props } from "../../types"
import createClassList from "../../utilities/createClassList"
import mapAttributes from "../../utilities/mapAttributes"
import mapDataset from "../../utilities/mapDataset"
import toTrainCase from "../../utilities/toTrainCase"
import type { HTMLAttributes } from "../../form/html-types"
import { DEFAULT_LOCALES } from "../../constants"

const {
	["class:list"]: classList = [],
	dataset,
	itemprop,
	link = {},
	locales = DEFAULT_LOCALES,
	options = {},
	type = "Number",
	useTabularNumerals,
	value,
	...attrs
} = Astro.props

useTabularNumerals && import("./index.css")

const sbType = `sb-${toTrainCase(type)}`
const data = { [sbType]: "" }
const linkData = { [sbType]: "link" }
const { href } = link

const elementAttrs = mapAttributes(attrs as HTMLAttributes, [sbType])
const linkAttrs = mapAttributes(link, [
	sbType,
	...(useTabularNumerals ? ["sb-tabular-nums"] : []),
])

const ext = `${href}`?.includes("://") ? { rel: "external" } : {}
const val = typeof value === "number" ? value : parseFloat(String(value))

const num = Number.isNaN(val)
	? await Astro.slots.render("default")
	: new Intl.NumberFormat(locales, options).format(val as number)

const prop = itemprop
	? { itemprop, itemtype: `https://schema.org/${type}` }
	: {}
---

{
	href ? (
		<a {...linkAttrs} {...mapDataset(linkData)} {href} {...ext}>
			<span {...elementAttrs} {...mapDataset(data)} {...prop} set:html={num} />
		</a>
	) : (
		<span {...elementAttrs} {...mapDataset(data)} {...prop} set:html={num} />
	)
}
