---
import type { NumberProps as Props } from "../../types";
import createClassList from "../../utilities/createClassList";
import mapDataset from "../../utilities/mapDataset";
import type { LinkAttributes } from "../../types";

const {
	["class:list"]: classList = [],
	dataset,
	itemprop,
	link = {},
	locales = ["en-US"],
	options = {},
	type = "Number",
	useTabularNumerals,
	value,
	...attrs
} = Astro.props;

useTabularNumerals && import("./index.css");

const sbType = `sb-${type.toLocaleLowerCase()}`;
const data = { [sbType]: "" };
const linkData = { [sbType]: "link" };

const {
	["class:list"]: linkClassList = [],
	dataset: linkDataset,
	href,
	...linkAttrs
} = link as LinkAttributes;

const classes = [
	sbType,
	...(useTabularNumerals ? ["sb-tabular-nums"] : []),
	...classList,
];
const ext = href?.includes("://") ? { rel: "external" } : {};
const val = typeof value === "number" ? value : parseFloat(String(value));

const num = Number.isNaN(val)
	? await Astro.slots.render("default")
	: new Intl.NumberFormat(locales, {
			...options,
			maximumSignificantDigits: 6,
	  }).format(val as number);

const prop = itemprop
	? { itemprop, itemtype: `https://schema.org/${type}` }
	: {};
---

{
	href ? (
		<a
			{...linkAttrs}
			class:list={createClassList(`${sbType}-link`, linkClassList)}
			{...mapDataset(linkDataset)}
			{...mapDataset(linkData)}
			{href}
			{...ext}
		>
			<span
				{...attrs}
				class:list={classes}
				{...mapDataset(dataset)}
				{...mapDataset(data)}
				{...prop}
				set:html={num}
			/>
		</a>
	) : (
		<span
			{...attrs}
			class:list={classes}
			{...mapDataset(dataset)}
			{...mapDataset(data)}
			{...prop}
			set:html={num}
		/>
	)
}
