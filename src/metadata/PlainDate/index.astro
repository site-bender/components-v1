---
import {
  DEFAULT_CALENDAR,
  DEFAULT_DATE_OPTIONS,
  DEFAULT_LOCALE,
} from "../../constants";
import { Intl, Temporal } from "@js-temporal/polyfill";
import type { Thing } from "../../schema.org";
import mapDataset from "../../utilities/mapDataset";
import type { Dataset } from "../../types";
import type { HTMLAttributes } from "astro/types";
import Microdata from "../../Microdata/index.astro";

export type Props<T extends Thing> = HTMLAttributes<"time"> & {
  calendar?: Temporal.CalendarLike;
  cssClasses?: Array<string>;
  dataset?: Dataset;
  day?: number | string;
  era?: string | undefined;
  eraYear?: string | undefined;
  itemprop?: string | undefined;
  locale?: string | Array<string>;
  month?: number | string;
  monthCode?: string;
  options?: Intl.DateTimeFormatOptions;
  plainDate?: string | Temporal.PlainDateLike;
  properties?: Partial<T>;
  itemtype?: string;
  year?: number | string;
};

const {
  ["class:list"]: classList = [],
  calendar = DEFAULT_CALENDAR,
  dataset,
  day,
  era,
  eraYear,
  itemprop,
  locale = DEFAULT_LOCALE,
  month,
  monthCode,
  options = {},
  plainDate = Temporal.Now.plainDate(Astro.props.calendar || DEFAULT_CALENDAR),
  properties,
  itemtype,
  year,
  ...attrs
} = Astro.props;

const css = ["sb-plain-date", ...cssClasses].join(" ");
const data = mapDataset(dataset);
const value = plainDate
  ? plainDate instanceof Temporal.PlainDate
    ? (plainDate as Temporal.PlainDate)
    : Temporal.PlainDate.from(plainDate)
  : Temporal.PlainDate.from({
      ...(typeof calendar === "string"
        ? { calendar: Temporal.Calendar.from(calendar) }
        : { calendar }),
      day: Number(day),
      ...(monthCode ? { monthCode } : { month: Number(month) }),
      ...(era && eraYear ? { era, eraYear } : { year: Number(year) }),
    } as Temporal.PlainDateLike);

const opts = Object.assign({}, DEFAULT_DATE_OPTIONS, {
  calendar: value.calendarId.toString(),
  ...options,
});

const label = new Intl.DateTimeFormat(locale, opts).format(value);

const useMicrodata = Boolean(import.meta.env.USE_MICRODATA);
const meta = {
  type: itemtype,
  ...(itemprop ? { [itemprop]: plainDate.toString() } : {}),
  ...properties,
};
---

{useMicrodata && type ? <Microdata as="span" properties={meta} /> : null}
<time class={css} {...data} datetime={value.toJSON()} {...attrs}>{label}</time>
