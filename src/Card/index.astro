---
import "./index.css"
import Picture from "../Picture/index.astro"
import createClassList from "../utilities/createClassList"
import generateShortId from "../utilities/generateShortId"
import mapAttributes from "../utilities/mapAttributes"
import type { CardProps as Props } from "../types"

const {
	["class:list"]: classList = [],
	description = {},
	heading = {},
  href,
	id = generateShortId(),
  isInvertible,
	level = 3,
	link = {},
  picture = {},
  title,
	...attrs
} = Astro.props

const classes = isInvertible
	? createClassList("sb-card", "sb-allow-invert", classList)
	: createClassList("sb-card", classList)

const descAttrs = mapAttributes(description, ["sb-card-description"])
const headingAttrs = mapAttributes(heading, ["sb-card-heading"])
const linkAttrs = mapAttributes(link, ["sb-card-link"])
const wrapperAttrs = mapAttributes(attrs, classes)

const desc = await Astro.slots.render("default")
const descId = `${id}_description`
const Element = `h${level}`
---

<section {...wrapperAttrs} data-sb-card {id}>
  {
    href ? (
      <a
				{...linkAttrs}
				aria-describedby={descId}
				data-sb-card="link"
				{href}
			>
				<Element {...headingAttrs} data-sb-card="heading">
					{title}
				</Element>
        {picture ? (
          <Picture {...picture} />
        ) : null}
      </a>
    ) : (
      <div aria-describedby={descId}>
				<Element {...headingAttrs} data-sb-card="heading">
					{title}
				</Element>
        {picture ? (
          <Picture {...picture} />
        ) : null}
      </div>
    )
  }
  <div {...descAttrs} data-sb-card="description" id={descId}>
    <Fragment set:html={desc} />
  </div>
</section>
