---
import "./index.css";
import Picture from "../Picture/index.astro";
import createClassList from "../utilities/createClassList";
import generateShortId from "../utilities/generateShortId";
import mapDataset from "../utilities/mapDataset";
import type { BaseAttributes } from "../types/html";
import type { PictureProps } from "../types";

const {
	["class:list"]: classList = [],
	description = {},
	heading = {},
	id = generateShortId(),
	level = 3,
	link = {},
	wrapper = {},
  dataset,
  href,
  image = {},
  isInvertible,
  title,
	...attrs
} = Astro.props;

const { alt, filename, src, width, ...imageAttrs } = image;

const {
	["class:list"]: descClassList = [],
	dataset: descDataset,
	...descAttrs
} = description as BaseAttributes;

const {
	["class:list"]: headingClassList = [],
	dataset: headingDataset,
	...headingAttrs
} = heading as BaseAttributes;

const {
	["class:list"]: linkClassList = [],
	dataset: linkDataset,
	...linkAttrs
} = link as BaseAttributes;

const {
	["class:list"]: wrapperClassList = [],
	dataset: wrapperDataset,
	...wrapperAttrs
} = wrapper as BaseAttributes;

const classes = isInvertible
	? createClassList("sb-card", "sb-allow-invert", classList)
	: createClassList("sb-card", classList);

const desc = await Astro.slots.render("default");
const descId = `${id}_description`;
const Elem = `h${level}`;
---

<section
	{...wrapperAttrs}
	class:list={classes}
	{...mapDataset(dataset)}
	data-sb-card
	{id}
>
  {
    href ? (
      <a
				{...linkAttrs}
				aria-describedby={descId}
				class:list={createClassList("sb-card-link", linkClassList)}
				data-sb-card="link"
				{...mapDataset(linkDataset)}
				{href}
			>
				<Elem
					{...headingAttrs}
					class:list={headingClassList}
					{...mapDataset(headingDataset)}
					data-sb-card="heading"
				>
					{title}
				</Elem>
        {image.filename ? (
          <Picture
            {...imageAttrs}
            {alt}
            {filename}
            {src}
            {width}
          />
        ) : null}
      </a>
    ) : (
      <div aria-describedby={descId}>
				<Elem
					{...headingAttrs}
					class:list={headingClassList}
					{...mapDataset(headingDataset)}
					data-sb-card="heading"
				>
					{title}
				</Elem>
        {image.filename ? (
          <Picture
            {...imageAttrs}
            {alt}
            {filename}
            {src}
            {width}
          />
        ) : null}
      </div>
    )
  }
  <div
		{...descAttrs}
		class:list={createClassList("sb-card-description", descClassList)}
		data-sb-card="description"
		{...mapDataset(descDataset)}
		id={descId}
	>
    <Fragment set:html={desc} />
  </div>
</section>
