---
import { Temporal } from "@js-temporal/polyfill";
import { TIME_ZONE } from "../../constants";
import FieldWrapper from "../FieldWrapper/index.astro";
import generateShortId from "../../utilities/generateShortId";
import mapDataset from "../../utilities/mapDataset";
import type {
  Calendar,
  DateTimeFormatOptions,
  Dataset,
  Messages,
} from "../../types";
import type { HTMLAttributes } from "astro/types";
import ZonedDateTime from "../../metadata/ZonedDateTime/index.astro";

export type Props = Omit<HTMLAttributes<"input">, "value" | "slot"> & {
  calendar?: Calendar | Temporal.Calendar | Temporal.CalendarLike;
  dataset?: Dataset;
  day?: number | string;
  era?: string | undefined;
  eraYear?: number | undefined;
  help?: string;
  hour?: number | string;
  label: string;
  locale?: string | Array<string>;
  messages?: Messages;
  microsecond?: number | string;
  millisecond?: number | string;
  minute?: number | string;
  month?: number | string;
  monthCode?: string;
  name: string;
  nanosecond?: number | string;
  offset?: string;
  options?: DateTimeFormatOptions;
  readonly?: boolean;
  second?: number | string;
  timeZone?: keyof typeof TIME_ZONE | Temporal.TimeZone | Temporal.TimeZoneLike;
  value?: string | Temporal.ZonedDateTime | Temporal.ZonedDateTimeLike;
  year?: number | string;
};

const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;

const {
  calendar,
  dataset,
  day,
  era,
  eraYear,
  help,
  hour,
  id = `_${generateShortId()}`,
  label,
  locale,
  messages,
  microsecond,
  millisecond,
  minute,
  month,
  monthCode,
  nanosecond,
  offset,
  options,
  readonly,
  second,
  size,
  timeZone = tz,
  value: rawValue,
  year,
  ...attrs
} = Astro.props;

const labelId = `${id}-label`;
const helpId = `${id}-help`;
const data = mapDataset(dataset);

const value = rawValue
  ? Temporal.ZonedDateTime.from(rawValue)
  : Temporal.ZonedDateTime.from({
      ...(calendar ? { calendar: Temporal.Calendar.from(calendar) } : {}),
      ...(day == null ? {} : { day: Number(day) }),
      ...(era && eraYear
        ? { era, eraYear }
        : year == null
        ? {}
        : { year: Number(year) }),
      ...(hour == null ? {} : { hour: Number(hour) }),
      ...(microsecond == null ? {} : { microsecond: Number(microsecond) }),
      ...(millisecond == null ? {} : { millisecond: Number(millisecond) }),
      ...(minute == null ? {} : { minute: Number(minute) }),
      ...(monthCode
        ? { monthCode }
        : month == null
        ? {}
        : { month: Number(month) }),
      ...(nanosecond == null ? {} : { nanosecond: Number(nanosecond) }),
      ...(second == null ? {} : { second: Number(second) }),
      ...(timeZone
        ? { timeZone: Temporal.TimeZone.from(timeZone) }
        : offset
        ? { offset }
        : {}),
    });
---

<FieldWrapper
  fieldType="sb-zoned-date-time"
  {...help ? { help } : {}}
  helpId={helpId}
  id={id as string}
  label={label}
  labelId={labelId}
  {...messages ? { messages } : {}}
  name={attrs.name}
  readonly={readonly}
  {...attrs.required ? { required: true } : {}}
>
  <Fragment slot="element">
    {
      readonly ? (
        <div class="readonly sb-zoned-date-time-readonly">
          <ZonedDateTime {...attrs} value={value} />
        </div>
      ) : (
        <div class="multiple-input">
          <input
            aria-labelledBy={`${labelId} ${helpId}`}
            class="sb-zoned-date-time-datetime-input"
            {...data}
            id={id as string}
            {...attrs}
            type="datetime-local"
            value={value ? value.toPlainDateTime().toJSON() : ""}
          />
          <select
            aria-labelledBy={`${labelId} ${helpId}`}
            class="sb-zoned-date-time-timezone-select"
            {...data}
            id={`${id}-timezone`}
            {...attrs}
          >
            {Object.keys(TIME_ZONE)
              .sort()
              .map((key) => (
                <option
                  selected={key === value.timeZone.toString()}
                  value={key}
                >
                  {key}
                </option>
              ))}
          </select>
        </div>
      )
    }
  </Fragment>
</FieldWrapper>
