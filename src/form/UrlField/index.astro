---
import FieldWrapper from "../FieldWrapper/index.astro";
import generateShortId from "../../utilities/generateShortId";
import mapDataset from "../../utilities/mapDataset";
import type { Dataset, Messages } from "../../types";
import type { HTMLAttributes } from "astro/types";
import Url from "../../metadata/Url/index.astro";

export type Props = HTMLAttributes<"input"> & {
  dataset?: Dataset;
  help?: string;
  isHyperlink?: boolean;
  label: string;
  name: string;
  messages?: Messages;
  readonly?: boolean;
  value?: string;
};

const {
  dataset,
  help,
  id = `_${generateShortId()}`,
  isHyperlink,
  itemprop,
  itemtype,
  label,
  messages,
  readonly,
  value,
  ...attrs
} = Astro.props;

const labelId = `${id}-label`;
const helpId = `${id}-help`;
const data = mapDataset(dataset);
const properties = itemtype && itemprop ? { itemscope: true, itemtype } : {};
const property = itemprop ? { itemprop } : {};
---

<FieldWrapper
  fieldType="sb-url"
  {...help ? { help } : {}}
  helpId={helpId}
  id={id as string}
  label={label}
  labelId={labelId}
  {...messages ? { messages } : {}}
  name={attrs.name}
  {...properties}
  readonly={readonly}
  {...attrs.required ? { required: true } : {}}
>
  <Fragment slot="element">
    {
      readonly ? (
        <div class="readonly sb-url-readonly" id={id as string}>
          <Url isHyperlink={isHyperlink} {...property}>
            {value}
          </Url>
        </div>
      ) : (
        <input
          aria-labelledBy={`${labelId} ${helpId}`}
          class="sb-url-input"
          {...data}
          id={id as string}
          {...attrs}
          {...property}
          type="url"
          {...(value ? { value } : {})}
        />
      )
    }
  </Fragment>
</FieldWrapper>

{
  /*  <script
	define:vars={{
		attrs,
		dataset,
		defaultValue: value,
		id,
		helpId,
		isHyperlink,
		labelId,
		readonly,
	}}
>
	// if (typeof readonly === "undefined") {
	const element = document.querySelector(`#${id}`);
	const wrapper = document.querySelector(`#${id}-wrapper`);
	const output = document.querySelector(`#${id}-help`);

	const editButton = globalThis._makeElement(
		"BUTTON",
		{ class: "sb-field-edit-toggle", id: `${id}-button`, type: "button" },
		[globalThis._makeTextNode(element.tagName === "DIV" ? "Edit" : "Save")]
	);
	output?.setAttribute(
		"style",
		element.tagName === "DIV" ? "display: none;" : "display: block"
	);

	globalThis._subscribe("click", `${id}-button`, function (event) {
		const el = document.querySelector(`#${id}`);
		const button = document.querySelector(`#${id}-button`);
		const help = document.querySelector(`#${id}-help`);

		if (el.tagName === "DIV") {
			const input = globalThis._makeElement("INPUT", {
				"aria-labelledby": `${labelId} ${helpId}`,
				class: "sb-url-input",
				...Object.entries(dataset || {}).reduce(
					(acc, [key, value]) => ({
						...acc,
						[`data-${key}`]: value,
					}),
					{}
				),
				id,
				...attrs,
				type: "url",
				value: el.textContent.trim(),
			});

			el.replaceWith(input);
			button.innerText = "Save";
			help.setAttribute("style", "display: block;");
		} else {
			const div = globalThis._makeElement(
				"DIV",
				{
					class: "readonly sb-url-readonly",
					id,
				},
				isHyperlink
					? [
							globalThis._makeElement(
								"A",
								{
									class: "sb-url-link",
									href: el.value,
								},
								[globalThis._makeTextNode(el.value)]
							),
					  ]
					: [
							globalThis._makeElement(
								"SPAN",
								{
									class: "sb-url-span",
								},
								[globalThis._makeTextNode(el.value)]
							),
					  ]
			);

			el.replaceWith(div);
			button.innerText = "Edit";
			help.setAttribute("style", "display: none;");
		}
	});

	console.log(wrapper);
	wrapper.appendChild(editButton);
	// }
</script> */
}
