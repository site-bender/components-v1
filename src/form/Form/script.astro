---
---

<script>
	;(function () {
		globalThis.addEventListener("DOMContentLoaded", function () {
			const forms = document.querySelectorAll("form")
			const formFields = ["INPUT", "SELECT", "TEXTAREA"]

			const VALIDITIES = [
				"badInput",
				"customError",
				"patternMismatch",
				"rangeOverflow",
				"rangeUnderflow",
				"stepMismatch",
				"tooLong",
				"tooShort",
				"typeMismatch",
				"valueMissing",
			]

			function setTouched(element: HTMLElement) {
				if (formFields.includes(element.tagName)) {
					element.classList.add("sb-touched")
				}
			}

			function setDirty(element: HTMLInputElement) {
				if (formFields.includes(element.tagName)) {
					if (element.value !== element.defaultValue) {
						element.classList.add("sb-dirty")
					} else {
						element.classList.remove("sb-dirty")
					}
				}
			}

			function valueMissing(element: HTMLElement): string {
				const type =
					(element.tagName === "INPUT" && (element as HTMLInputElement).type) ||
					(element.tagName === "SELECT" && "select") ||
					(element.tagName === "TEXTAREA" && "text")

				switch (type) {
					case "email":
						return "That's a cool email address!"
					case "tel":
						return "OK, we got yer number!"
					case "select":
						return "Thanks for choosing one."
					default:
						return "Lookin' good!"
				}
			}

			function setHelp(element: HTMLInputElement) {
				if (formFields.includes(element.tagName)) {
					const label = element.labels?.[0]?.children?.[0]?.textContent
					const help = (
						element.closest(".sb-field") || element.closest("fieldset")
					)?.querySelector(".sb-help")
					const clean = element.value === element.defaultValue

					if (help && !help.hasAttribute("data-sb-initial")) {
						const initial = (help as HTMLElement).innerText.trim()

						help.setAttribute("data-sb-initial", initial)
					}

					if (clean) {
						if (help) {
							help.replaceChildren(
								help.getAttribute("data-sb-initial") as string
							)
							help.classList.remove("sb-help-invalid")
							help.classList.remove("sb-help-valid")
						}

						return
					}

					if (element.validity.valid) {
						if (help) {
							help.replaceChildren(valueMissing(element))
							help.classList.remove("sb-help-invalid")
							help.classList.add("sb-help-valid")
						}

						return valueMissing(element)
					}

					const errors = VALIDITIES.filter(
						(validity) => element.validity[validity as keyof ValidityState]
					).map((validity) => {
						switch (validity) {
							case "valueMissing":
								return valueMissing(element)
							case "badInput":
								return "looks wrong"
							case "patternMismatch":
								return "doesn't match the expected pattern"
							case "rangeOverflow":
								return `should not be more than ${element.getAttribute("max")}`
							case "rangeUnderflow":
								return `should be at least ${element.getAttribute("min")}`
							case "stepMismatch":
								return `should be evenly divisible by ${element.getAttribute(
									"step"
								)}`
							case "tooLong":
								return `shouldn't be longer than ${element.getAttribute(
									"maxlength"
								)} characters`
							case "tooShort":
								return `should be at least ${element.getAttribute(
									"minlength"
								)} characters`
							case "typeMismatch":
								return `doesn't seem to be a valid ${element.getAttribute(
									"type"
								)}`
							default:
								return ""
						}
					})

					if (help) {
						help.replaceChildren(`${label} ${errors.join(" and ")}`)
						help.classList.remove("sb-help-valid")
						help.classList.add("sb-help-invalid")
					}

					return `${label} ${errors.join(" and ")}`
				}

				return ""
			}

			Array.from(forms).forEach((form) => {
				form.setAttribute("novalidate", "")
				;[...form.elements]
					.filter((element) =>
						["INPUT", "SELECT", "TEXTAREA"].includes(element.tagName)
					)
					.forEach((element) => {
						element.addEventListener("input", function ({ target }) {
							setDirty(target as HTMLInputElement)
							setHelp(target as HTMLInputElement)
						})
					})

				form.addEventListener("submit", async function (event) {
					event.preventDefault()
					;[...form.elements]
						.filter((element) =>
							["INPUT", "SELECT", "TEXTAREA"].includes(element.tagName)
						)
						.forEach((element) => {
							setTouched(element as HTMLElement)
						})

					if (this.reportValidity()) {
						const formData = new FormData(this)
						const action = this.action

						const body = JSON.stringify(
							[...formData.entries()].reduce((acc, [key, value]) => {
								const val = acc[key] ? `${acc[key]},${value}` : value

								return {
									...acc,
									[key]: val,
								}
							}, {} as Record<string, unknown>)
						)

						const response = await fetch(action, {
							method: "POST",
							headers: {
								"Accept": "application/json",
								"Content-Type": "application/json",
							},
							body,
						})

						const json = await response.json()

						console.log("json", json)
					} else {
						globalThis.alert(
							"There are some issues with your form submission. Please check the form and try again."
						)
					}
				})
			})

			document.addEventListener("focusin", function ({ target }) {
				setTouched(target as HTMLInputElement)
				setDirty(target as HTMLInputElement)
			})

			document.addEventListener("focusout", function ({ target }) {
				setDirty(target as HTMLInputElement)
				setHelp(target as HTMLInputElement)
			})
		})
	})()
</script>
