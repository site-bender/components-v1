---
import FieldWrapper from "../FieldWrapper/index.astro";
import generateShortId from "../../utilities/generateShortId";
import mapDataset from "../../utilities/mapDataset";
import Metadata from "../../metadata/Metadata/index.astro";
import type { Dataset, Messages } from "../../types";
import type { HTMLAttributes } from "astro/types";

export type Props = HTMLAttributes<"input"> &
  HTMLAttributes<"textarea"> &
  HTMLAttributes<"a"> & {
    dataset?: Dataset;
    help?: string;
    label: string;
    messages?: Messages;
    name: string;
    readonly?: boolean;
    value?: string;
  };

const {
  cols,
  dataset,
  dirname = `${Astro.props.name}:direction`,
  help,
  href,
  id = `_${generateShortId()}`,
  itemid,
  itemprop,
  itemref,
  itemtype,
  label,
  messages,
  readonly,
  rows,
  size,
  value,
  wrap,
  ...attrs
} = Astro.props;

const isTextarea = rows != null;
const labelId = `${id}-label`;
const helpId = `${id}-help`;
const data = mapDataset(dataset);
const properties =
  itemtype && itemprop ? { itemid, itemscope: true, itemtype } : {};
---

<FieldWrapper
  fieldType="sb-string"
  {...help ? { help } : {}}
  helpId={helpId}
  id={id as string}
  label={label}
  labelId={labelId}
  {...messages ? { messages } : {}}
  name={attrs.name}
  readonly={readonly}
  {...attrs.required ? { required: true } : {}}
>
  <Fragment slot="element">
    {
      readonly ? (
        <div class="readonly sb-string-readonly" {...properties}>
          <Metadata href={href} itemprop={itemprop}>
            {value}
          </Metadata>
        </div>
      ) : isTextarea ? (
        <>
          {/* prettier-ignore */}
          <textarea aria-labelledBy={`${labelId} ${helpId}`} class="sb-string-textarea" {...(cols ? { cols: `${cols}` } : {})} {...data} dirname={dirname} id={id as string} {...attrs} rows={rows || 3} {...(wrap ? { wrap } : {})}>{value}</textarea>
        </>
      ) : (
        <input
          aria-labelledBy={`${labelId} ${helpId}`}
          class="sb-string-input"
          {...data}
          dirname={dirname}
          id={id as string}
          {...attrs}
          {...(size ? { size: `${size}` } : {})}
          type="text"
          {...(value ? { value } : {})}
        />
      )
    }
  </Fragment>
  <Fragment slot="help">
    <slot />
  </Fragment>
</FieldWrapper>
