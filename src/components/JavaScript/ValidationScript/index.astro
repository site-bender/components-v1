---
---

<script>
	import composeValidators from "../../../operations/composeValidators"
	import type { Validation } from "../../../types/constraints"

	// type FormEvents = "change" | "click" | "focusin" | "focusout" | "submit"

	// type Subscriptions = Record<EventType, Record<string, (arg0: Event) => void>>

	// type Sitebender = {
	// 	disable: (arg0: EventType) => void
	// 	enable: (arg0: EventType) => void
	// 	listeners: Record<EventType, (arg0: Event) => void>
	// 	subscribe: (
	// 		type: EventType,
	// 		id: string,
	// 		callback: (arg0: FocusEvent) => void
	// 	) => void
	// 	subscriptions: Subscriptions
	// 	unsubscribe: (type: EventType, id: string) => void
	// }

	// type GT = typeof globalThis & {
	// 	_sitebender: Sitebender
	// }

	const VALIDATABLES = ["INPUT", "SELECT", "TEXTAREA"]
	const VALIDATABLE_INPUT_TYPES = [
		"checkbox",
		"color",
		"date",
		"datetime-local",
		"email",
		"file",
		"month",
		"number",
		"password",
		"radio",
		"range",
		"search",
		"tel",
		"text",
		"time",
		"url",
		"week",
	]

	// Check if validatable
	function isValidatable(element: HTMLElement) {
		return (
			VALIDATABLES.includes(element.tagName) &&
			(element.tagName !== "INPUT" ||
				VALIDATABLE_INPUT_TYPES.includes((element as HTMLInputElement).type)) &&
			!("novalidate" in element.dataset)
		)
	}

	function handleFocusIn({ target }: FocusEvent) {
		if (isValidatable(target as HTMLFormElement)) {
			console.log("focusin", target)
		}
	}

	function handleFocusOut({ target }: FocusEvent) {
		if (isValidatable(target as HTMLFormElement)) {
			console.log("focusout", target)
		}
	}

	function addFormScript() {
		// Get forms
		const forms = [...document.querySelectorAll("form")]

		// Set novalidate
		forms.forEach(async (form) => {
			form.setAttribute("novalidate", "")
			const validated = [...form.querySelectorAll("[data-sb-validation]")]

			for (const item in validated) {
				const elem = validated[item] as HTMLElement & {
					_sitebender: { validate?: (validation: Validation) => Validation }
				}
				if (elem?.dataset?.sbValidation) {
					elem._sitebender ??= {}
					elem._sitebender.validate = await composeValidators(
						JSON.parse(elem.dataset.sbValidation)
					)
					delete elem.dataset.sbValidation
				}
			}

			console.info(`« Form validation enabled for ${form.name || form.id}. »`)
		})

		if (_sitebender.subscriptions) {
			_sitebender.subscribe("focusin", "__all", handleFocusIn)
			_sitebender.subscribe("focusout", "__all", handleFocusOut)
		} else {
			document.addEventListener("focusin", handleFocusIn)
			document.addEventListener("focusout", handleFocusOut)
		}
	}

	globalThis.addEventListener("DOMContentLoaded", addFormScript)
</script>
