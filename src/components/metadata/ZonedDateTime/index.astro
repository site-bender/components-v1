---
import Microdata from "../../Microdata/index.astro"
import mapAttributes from "../../../utilities/mapAttributes"
import type { PlainDateTimeProps as Props } from "../../../types"
import {
  DEFAULT_CALENDAR,
  DEFAULT_LOCALES,
  DEFAULT_TIME_ZONE,
  DEFAULT_ZONED_DATE_TIME_OPTIONS,
} from "../../../constants"
import { Temporal } from "@js-temporal/polyfill"
import type { HTMLAttributes } from "../../form/html-types"

const {
  calendar = DEFAULT_CALENDAR,
  dataset,
  day,
  era,
  eraYear,
  hour = 0,
  locales = DEFAULT_LOCALES,
  microdata = {},
  microsecond = 0,
  millisecond = 0,
  minute = 0,
  month,
  monthCode,
  nanosecond = 0,
  offset,
  options,
  properties = {},
  second = 0,
  timeZone = DEFAULT_TIME_ZONE,
  year,
  zonedDateTime = Temporal.Now.zonedDateTime(
    Astro.props.calendar || DEFAULT_CALENDAR,
    Astro.props.timeZone || DEFAULT_TIME_ZONE,
  ),
  ...attrs
} = Astro.props

const elementAttrs = mapAttributes(attrs as HTMLAttributes, [
  "sb-zoned-date-time",
])

const val = zonedDateTime || {
  calendar,
  day,
  hour: Number(hour),
  microsecond: Number(microsecond),
  millisecond: Number(millisecond),
  minute: Number(minute),
  ...(monthCode ? { monthCode } : { month }),
  nanosecond: Number(nanosecond),
  second: Number(second),
  timeZone,
  ...(era ? { era, eraYear } : { year }),
}

const value = Temporal.ZonedDateTime.from(val)

const opts = {
  ...DEFAULT_ZONED_DATE_TIME_OPTIONS,
  calendar: value.calendarId.toString(),
  ...options,
}

const label = value.toLocaleString(locales, opts)

const useMicrodata = Boolean(import.meta.env.USE_MICRODATA)
---

{
  useMicrodata ? (
    <Microdata
      {microdata}
      {properties}
    />
  ) : null
}
<time
  {...elementAttrs}
  datetime={value.toJSON()}
>
  {label}
</time>
 ../../Fart/html-types
