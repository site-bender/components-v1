---
import FieldsetWrapper from "../../FieldsetWrapper/index.astro"
import RadioInput from "./RadioInput/index.astro";
import generateShortId from "../../../../utilities/generateShortId";
import mapAttributes from "../../../../utilities/mapAttributes"
import type { RadioGroup as Props } from "../../../../types/form";
import type { HTMLAttributes } from "../../../../types/html"

const {
	disabled,
	field = "radio-group",
	form,
	group,
	help,
	id = generateShortId(),
	includeNull,
	label,
	legend,
	message,
	name,
	options,
	outer,
	required,
	selected,
	tag,
	wrapper,
	...attrs
} = Astro.props;

const inputAttrs = mapAttributes(attrs as HTMLAttributes, [
	"sb-radio-input",
])
---

<FieldsetWrapper
	{disabled}
	{field}
	{form}
	{group}
	{help}
	{id}
	{label}
	{legend}
	{message}
	name={`${name}:wrapper`}
	{outer}
	{required}
	{tag}
>
	{
		(labelledBy: string) => {
			return <>
				{
					options.map(({ label, value, ...attrs }) => {
						const inputAttrs = mapAttributes(attrs as HTMLAttributes, [
							"sb-radio-input",
						])

						return (
							<RadioInput
								{...inputAttrs}
								checked={Boolean(selected) && selected === value}
								{form}
								groupLabelId={labelledBy}
								{name}
								{required}
								{value}
								wrapper={{ dataset: { "sb-radio-group": "radio-input" } }}
							>
								{label}
							</RadioInput>
						)
					})
				}
				{
					includeNull ? (
						<RadioInput
							{...inputAttrs}
							checked={Boolean(selected) && selected === ""}
							{form}
							groupLabelId={labelledBy}
							{name}
							{required}
							value=""
							wrapper={{ dataset: { "sb-radio-group": "radio-input" } }}
						>
							N/A
						</RadioInput>
					) : null
				}
			</>
		}
	}
</FieldsetWrapper>
