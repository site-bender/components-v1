---
import FieldWrapper from "../../wrappers/FieldWrapper/index.astro";
import generateShortId from "../../utilities/generateShortId";
import mapDataset from "../../utilities/mapDataset";
import PlainDate from "../PlainDate/index.astro";
import toPlainDateString from "../../utilities/toPlainDateString";
import type { Calendar, DateTimeFormatOptions } from "../../types";
import type { Dataset, Messages } from "../../types";
import type { HTMLAttributes } from "astro/types";
import type { Temporal } from "@js-temporal/polyfill";
import type { TIME_ZONE } from "../../constants";

export type Props = Omit<HTMLAttributes<"input">, "slot" | "value"> & {
  calendar?: Calendar | Temporal.Calendar | Temporal.CalendarLike;
  dataset?: Dataset;
  day?: number | string;
  help?: string;
  label: string;
  locale?: string | Array<string>;
  messages?: Messages;
  month?: number | string;
  monthCode?: string;
  name: string;
  options?: DateTimeFormatOptions;
  readonly?: boolean;
  timeZone?: keyof typeof TIME_ZONE;
  value?: string | Temporal.PlainDate;
  year?: number | string;
};

const {
  calendar,
  dataset,
  day,
  help,
  id = `_${generateShortId()}`,
  label,
  locale,
  messages,
  month,
  monthCode,
  options,
  readonly,
  value: rawValue,
  year,
  ...attrs
} = Astro.props;

const labelId = `${id}-label`;
const helpId = `${id}-help`;
const data = mapDataset(dataset);

const value = rawValue
  ? typeof rawValue === "string"
    ? rawValue
    : toPlainDateString(rawValue)
  : toPlainDateString(undefined, {
      day: Number(day),
      month: Number(month),
      year: Number(year),
    });
---

<FieldWrapper
  fieldType="sb-plain-date"
  {...help ? { help } : {}}
  helpId={helpId}
  id={id as string}
  label={label}
  labelId={labelId}
  {...messages ? { messages } : {}}
  name={attrs.name}
  readonly={readonly}
  {...attrs.required ? { required: true } : {}}
>
  <Fragment slot="element">
    {
      readonly ? (
        <div class="readonly sb-plain-date-readonly">
          <PlainDate {...attrs} value={value} />
        </div>
      ) : (
        <input
          aria-labelledBy={`${labelId} ${helpId}`}
          class="sb-plain-date-input"
          {...data}
          id={id as string}
          pattern="\d{4}-\d{2}-\d{2}"
          {...attrs}
          type="date"
          {...(value ? { value } : {})}
        />
      )
    }
  </Fragment>
</FieldWrapper>
