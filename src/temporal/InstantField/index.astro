---
import { Temporal } from "@js-temporal/polyfill";
import FieldWrapper from "../../wrappers/FieldWrapper/index.astro";
import generateShortId from "../../utilities/generateShortId";
import Instant from "../Instant/index.astro";
import mapDataset from "../../utilities/mapDataset";
import type { Dataset, Messages } from "../../types";
import type { HTMLAttributes } from "astro/types";

export type Props = Omit<HTMLAttributes<"input">, "slot" | "value"> & {
  dataset?: Dataset;
  epochMicroseconds?: bigint | number | undefined;
  epochMilliseconds?: number | undefined;
  epochNanoseconds?: bigint | number | undefined;
  epochSeconds?: number | undefined;
  help?: string;
  label: string;
  messages?: Messages;
  name: string;
  readonly?: boolean;
  value?: string | Temporal.Instant;
};

const {
  dataset,
  epochMicroseconds,
  epochMilliseconds,
  epochNanoseconds,
  epochSeconds,
  help,
  id = `_${generateShortId()}`,
  label,
  messages,
  readonly,
  size = 30,
  value: rawValue,
  ...attrs
} = Astro.props;

const labelId = `${id}-label`;
const helpId = `${id}-help`;
const data = mapDataset(dataset);

const value = rawValue
  ? Temporal.Instant.from(rawValue)
  : epochNanoseconds
  ? Temporal.Instant.fromEpochNanoseconds(BigInt(epochNanoseconds))
  : epochMicroseconds
  ? Temporal.Instant.fromEpochMicroseconds(BigInt(epochMicroseconds))
  : epochMilliseconds
  ? Temporal.Instant.fromEpochMilliseconds(epochMilliseconds)
  : epochSeconds
  ? Temporal.Instant.fromEpochSeconds(epochSeconds)
  : undefined;
---

<FieldWrapper
  fieldType="sb-instant"
  {...help ? { help } : {}}
  helpId={helpId}
  id={id as string}
  label={label}
  labelId={labelId}
  {...messages ? { messages } : {}}
  name={attrs.name}
  readonly={readonly}
  {...attrs.required ? { required: true } : {}}
>
  <Fragment slot="element">
    {
      readonly ? (
        <div class="readonly sb-instant-readonly">
          <Instant {...attrs} value={value?.toJSON() || ""} />
        </div>
      ) : (
        <input
          aria-labelledBy={`${labelId} ${helpId}`}
          class="sb-instant-input"
          {...data}
          id={id as string}
          pattern="[12][0-9]{3}-(((0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)-(0[1-9]|[12][0-9]|30))|(02-(0[1-9]|[12][0-9])))T(0[1-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\.[0-9]{3}|\.[0-9]{6}|\.[0-9]{9})?Z"
          {...attrs}
          size={size}
          type="text"
          {...(value ? { value: value.toJSON() } : {})}
        />
      )
    }
  </Fragment>
</FieldWrapper>
