---
import Email from "../../../../src/metadata/Email/index.astro";
import CodeBlock from "../../../../src/CodeBlock/index.astro";
import copyToClipboardJs from "../../../../src/CodeBlock/copyToClipboard.js?raw";
import Layout from "../_layouts/index.astro";
import TableOfContents from "../_components/TableOfContents/index.astro";
import * as typeTs from "./_assets/type.ts.md";
import * as defaultExampleHtml from "./_assets/default-example.html.md";
import * as defaultExampleAstro from "./_assets/default-example.astro.md";
import * as isMailtoHtml from "./_assets/is-mailto.html.md";
import * as isMailtoAstro from "./_assets/is-mailto.astro.md";
import * as withDataAttrsHtml from "./_assets/with-data-attrs.html.md";
import * as withDataAttrsAstro from "./_assets/with-data-attrs.astro.md";
import * as withMicrodataHtml from "./_assets/with-microdata.html.md";
import * as withMicrodataAstro from "./_assets/with-microdata.astro.md";
import * as withLinkedDataHtml from "./_assets/with-linked-data.html.md";
import * as withLinkedDataAstro from "./_assets/with-linked-data.astro.md";
---

<Layout title="Email">
  <Fragment slot="tail">
    <script set:html={copyToClipboardJs} />
  </Fragment>
  <main>
    <article>
      <h2>Email</h2>
      <ol class="page-contents">
        <li><a href="#default">Default example</a></li>
        <li><a href="#mailto">Mailto example</a></li>
        <li><a href="#dataset">With dataset example</a></li>
        <li><a href="#linked-data">Linked Data example</a></li>
        <li><a href="#microdata">Microdata example</a></li>
      </ol>
      <p>
        The <code>Email</code> is used to mark up email addresses. It defaults to
        using microdata in the form of <a
          href="https://schema.org/Person"
          rel="external">Schema.org Person properties</a
        > for the <code>email</code> (address). Further microdata can be included
        via either <code>meta</code> elements or a LinkedData script.
      </p>
      <section id="types">
        <h3>Types</h3>
        <CodeBlock snippet={typeTs} />
        <p>
          The <code>dataset</code> prop takes a map of attribute names (minus the
          <code>data-</code>) and values and maps them to <code
            >data-&lt;name&gt;</code
          > attributes. See below.
        </p>
      </section>
      <section id="default">
        <h3>Default example</h3>
        <p>This is the minimum required to use the <code>Email</code>:</p>
        <CodeBlock snippet={defaultExampleAstro} />
        <p>Here is the actual component:</p>
        <p class="example">
          <Email>bob@dobbs.com</Email>
        </p>
        <p>And here is the HTML created:</p>
        <CodeBlock snippet={defaultExampleHtml} />
      </section>
      <section id="mailto">
        <h3>Mailto example</h3>
        <p>
          The email address can become a mailto link with the <code
            >isMailto</code
          > flag:
        </p>
        <CodeBlock snippet={isMailtoAstro} />
        <p>Here is the actual component:</p>
        <p class="example">
          <Email isMailto>bob@dobbs.com</Email>
        </p>
        <p>And here is the HTML created:</p>
        <CodeBlock snippet={isMailtoHtml} />
      </section>
      <section id="dataset">
        <h3>
          With <code>id</code>, <code>style</code>, and <code>data-</code> attributes
          example
        </h3>
        <p>
          We can also include data- attributes (and all normal HTML attributes
          for the input element, such as an <code>id</code>).
        </p>
        <CodeBlock snippet={withDataAttrsAstro} />
        <p>
          The <code>itemprops</code> correspond to the Schema.org properties for
          the Schema.org Book element. The <code>dataset</code> key-value pairs are
          whatever you want them to be.
        </p>
        <p>Here is the actual component:</p>
        <p class="example">
          <Email
            dataset={{
              type: "work",
            }}
            style="color: indigo; font-weight: bold"
            id="bobs-email"
          >
            bob@dobbs.com
          </Email>
        </p>
        <p>And here is the HTML created:</p>
        <CodeBlock snippet={withDataAttrsHtml} />
        <p>
          Note that HTML attributes will be added to the <code>a</code> element if
          an <code>href</code> attribute is included; otherwise, they will be added
          to the <code>span</code> element.
        </p>
      </section>
      <section id="linked-data">
        <h3>Linked Data example</h3>
        <p>
          We can also include linked data as <code>application/json+ld</code> in
          a
          <code>script</code> element according the the <a
            href="https://schema.org/ContactPoint"
            rel="external">Schema.org ContactPoint object</a
          > by setting the <code>type</code> property:
        </p>
        <CodeBlock snippet={withLinkedDataAstro} />
        <p>Here is the actual component:</p>
        <p class="example">
          <Email
            properties={{
              contactType: "guru",
              email: "bob@dobbs.com",
              name: "Church of the Subgenius",
            }}
            type="ContactPoint"
          >
            bob@dobbs.com
          </Email>
        </p>
        <p>And here is the HTML created:</p>
        <CodeBlock snippet={withLinkedDataHtml} />
      </section>
      <section id="microdata">
        <h3>Microdata example</h3>
        <p>
          We can also include microdata according the the <a
            href="https://schema.org/Organization"
            rel="external">Schema.org Organization object</a
          >:
        </p>
        <CodeBlock snippet={withMicrodataAstro} />
        <p>Here is the actual component:</p>
        <p class="example">
          <Email
            properties={{
              email: "bob@dobbs.com",
              founder: 'J.R. "Bob" Dobbs',
              name: "Church of the Subgenius",
            }}
            type="Organization"
            useMicrodata
          >
            bob@dobbs.com
          </Email>
        </p>
        <p>And here is the HTML created:</p>
        <CodeBlock snippet={withMicrodataHtml} />
      </section>
    </article>
  </main>
</Layout>
